/*
 * KeyVaultClient
 * The key vault client performs cryptographic key operations and vault operations against the Key Vault service.
 *
 * OpenAPI spec version: 2016-10-01
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.microsoft.identity.internal.test.keyvault.api;

import com.microsoft.identity.internal.test.keyvault.ApiCallback;
import com.microsoft.identity.internal.test.keyvault.ApiClient;
import com.microsoft.identity.internal.test.keyvault.ApiException;
import com.microsoft.identity.internal.test.keyvault.ApiResponse;
import com.microsoft.identity.internal.test.keyvault.Configuration;
import com.microsoft.identity.internal.test.keyvault.Pair;
import com.microsoft.identity.internal.test.keyvault.ProgressRequestBody;
import com.microsoft.identity.internal.test.keyvault.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;
import com.microsoft.identity.internal.test.keyvault.model.SasDefinitionBundle;
import com.microsoft.identity.internal.test.keyvault.model.SasDefinitionListResult;
import com.microsoft.identity.internal.test.keyvault.model.SasDefinitionUpdateParameters;
import com.microsoft.identity.internal.test.keyvault.model.StorageAccountCreateParameters;
import com.microsoft.identity.internal.test.keyvault.model.StorageAccountRegenerteKeyParameters;
import com.microsoft.identity.internal.test.keyvault.model.StorageBundle;
import com.microsoft.identity.internal.test.keyvault.model.StorageListResult;

import java.io.IOException;


import com.microsoft.identity.internal.test.keyvault.model.SasDefinitionCreateParameters;
import com.microsoft.identity.internal.test.keyvault.model.StorageAccountUpdateParameters;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class StorageApi {
    private ApiClient apiClient;

    public StorageApi() {
        this(Configuration.getDefaultApiClient());
    }

    public StorageApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for deleteSasDefinition
     * @param storageAccountName The name of the storage account. (required)
     * @param sasDefinitionName The name of the SAS definition. (required)
     * @param apiVersion Client API version. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteSasDefinitionCall(String storageAccountName, String sasDefinitionName, String apiVersion, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/storage/{storage-account-name}/sas/{sas-definition-name}"
            .replaceAll("\\{" + "storage-account-name" + "\\}", apiClient.escapeString(storageAccountName.toString()))
            .replaceAll("\\{" + "sas-definition-name" + "\\}", apiClient.escapeString(sasDefinitionName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (apiVersion != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("api-version", apiVersion));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteSasDefinitionValidateBeforeCall(String storageAccountName, String sasDefinitionName, String apiVersion, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'storageAccountName' is set
        if (storageAccountName == null) {
            throw new ApiException("Missing the required parameter 'storageAccountName' when calling deleteSasDefinition(Async)");
        }
        
        // verify the required parameter 'sasDefinitionName' is set
        if (sasDefinitionName == null) {
            throw new ApiException("Missing the required parameter 'sasDefinitionName' when calling deleteSasDefinition(Async)");
        }
        
        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling deleteSasDefinition(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteSasDefinitionCall(storageAccountName, sasDefinitionName, apiVersion, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Deletes a SAS definition from a specified storage account. This operation requires the storage/deletesas permission.
     * @param storageAccountName The name of the storage account. (required)
     * @param sasDefinitionName The name of the SAS definition. (required)
     * @param apiVersion Client API version. (required)
     * @return SasDefinitionBundle
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public SasDefinitionBundle deleteSasDefinition(String storageAccountName, String sasDefinitionName, String apiVersion) throws ApiException {
        ApiResponse<SasDefinitionBundle> resp = deleteSasDefinitionWithHttpInfo(storageAccountName, sasDefinitionName, apiVersion);
        return resp.getData();
    }

    /**
     * 
     * Deletes a SAS definition from a specified storage account. This operation requires the storage/deletesas permission.
     * @param storageAccountName The name of the storage account. (required)
     * @param sasDefinitionName The name of the SAS definition. (required)
     * @param apiVersion Client API version. (required)
     * @return ApiResponse&lt;SasDefinitionBundle&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<SasDefinitionBundle> deleteSasDefinitionWithHttpInfo(String storageAccountName, String sasDefinitionName, String apiVersion) throws ApiException {
        com.squareup.okhttp.Call call = deleteSasDefinitionValidateBeforeCall(storageAccountName, sasDefinitionName, apiVersion, null, null);
        Type localVarReturnType = new TypeToken<SasDefinitionBundle>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Deletes a SAS definition from a specified storage account. This operation requires the storage/deletesas permission.
     * @param storageAccountName The name of the storage account. (required)
     * @param sasDefinitionName The name of the SAS definition. (required)
     * @param apiVersion Client API version. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteSasDefinitionAsync(String storageAccountName, String sasDefinitionName, String apiVersion, final ApiCallback<SasDefinitionBundle> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteSasDefinitionValidateBeforeCall(storageAccountName, sasDefinitionName, apiVersion, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SasDefinitionBundle>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for deleteStorageAccount
     * @param storageAccountName The name of the storage account. (required)
     * @param apiVersion Client API version. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteStorageAccountCall(String storageAccountName, String apiVersion, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/storage/{storage-account-name}"
            .replaceAll("\\{" + "storage-account-name" + "\\}", apiClient.escapeString(storageAccountName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (apiVersion != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("api-version", apiVersion));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteStorageAccountValidateBeforeCall(String storageAccountName, String apiVersion, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'storageAccountName' is set
        if (storageAccountName == null) {
            throw new ApiException("Missing the required parameter 'storageAccountName' when calling deleteStorageAccount(Async)");
        }
        
        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling deleteStorageAccount(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteStorageAccountCall(storageAccountName, apiVersion, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Deletes a storage account. This operation requires the storage/delete permission.
     * @param storageAccountName The name of the storage account. (required)
     * @param apiVersion Client API version. (required)
     * @return StorageBundle
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public StorageBundle deleteStorageAccount(String storageAccountName, String apiVersion) throws ApiException {
        ApiResponse<StorageBundle> resp = deleteStorageAccountWithHttpInfo(storageAccountName, apiVersion);
        return resp.getData();
    }

    /**
     * 
     * Deletes a storage account. This operation requires the storage/delete permission.
     * @param storageAccountName The name of the storage account. (required)
     * @param apiVersion Client API version. (required)
     * @return ApiResponse&lt;StorageBundle&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<StorageBundle> deleteStorageAccountWithHttpInfo(String storageAccountName, String apiVersion) throws ApiException {
        com.squareup.okhttp.Call call = deleteStorageAccountValidateBeforeCall(storageAccountName, apiVersion, null, null);
        Type localVarReturnType = new TypeToken<StorageBundle>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Deletes a storage account. This operation requires the storage/delete permission.
     * @param storageAccountName The name of the storage account. (required)
     * @param apiVersion Client API version. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteStorageAccountAsync(String storageAccountName, String apiVersion, final ApiCallback<StorageBundle> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteStorageAccountValidateBeforeCall(storageAccountName, apiVersion, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<StorageBundle>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getSasDefinition
     * @param storageAccountName The name of the storage account. (required)
     * @param sasDefinitionName The name of the SAS definition. (required)
     * @param apiVersion Client API version. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getSasDefinitionCall(String storageAccountName, String sasDefinitionName, String apiVersion, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/storage/{storage-account-name}/sas/{sas-definition-name}"
            .replaceAll("\\{" + "storage-account-name" + "\\}", apiClient.escapeString(storageAccountName.toString()))
            .replaceAll("\\{" + "sas-definition-name" + "\\}", apiClient.escapeString(sasDefinitionName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (apiVersion != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("api-version", apiVersion));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getSasDefinitionValidateBeforeCall(String storageAccountName, String sasDefinitionName, String apiVersion, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'storageAccountName' is set
        if (storageAccountName == null) {
            throw new ApiException("Missing the required parameter 'storageAccountName' when calling getSasDefinition(Async)");
        }
        
        // verify the required parameter 'sasDefinitionName' is set
        if (sasDefinitionName == null) {
            throw new ApiException("Missing the required parameter 'sasDefinitionName' when calling getSasDefinition(Async)");
        }
        
        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling getSasDefinition(Async)");
        }
        

        com.squareup.okhttp.Call call = getSasDefinitionCall(storageAccountName, sasDefinitionName, apiVersion, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Gets information about a SAS definition for the specified storage account. This operation requires the storage/getsas permission.
     * @param storageAccountName The name of the storage account. (required)
     * @param sasDefinitionName The name of the SAS definition. (required)
     * @param apiVersion Client API version. (required)
     * @return SasDefinitionBundle
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public SasDefinitionBundle getSasDefinition(String storageAccountName, String sasDefinitionName, String apiVersion) throws ApiException {
        ApiResponse<SasDefinitionBundle> resp = getSasDefinitionWithHttpInfo(storageAccountName, sasDefinitionName, apiVersion);
        return resp.getData();
    }

    /**
     * 
     * Gets information about a SAS definition for the specified storage account. This operation requires the storage/getsas permission.
     * @param storageAccountName The name of the storage account. (required)
     * @param sasDefinitionName The name of the SAS definition. (required)
     * @param apiVersion Client API version. (required)
     * @return ApiResponse&lt;SasDefinitionBundle&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<SasDefinitionBundle> getSasDefinitionWithHttpInfo(String storageAccountName, String sasDefinitionName, String apiVersion) throws ApiException {
        com.squareup.okhttp.Call call = getSasDefinitionValidateBeforeCall(storageAccountName, sasDefinitionName, apiVersion, null, null);
        Type localVarReturnType = new TypeToken<SasDefinitionBundle>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Gets information about a SAS definition for the specified storage account. This operation requires the storage/getsas permission.
     * @param storageAccountName The name of the storage account. (required)
     * @param sasDefinitionName The name of the SAS definition. (required)
     * @param apiVersion Client API version. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getSasDefinitionAsync(String storageAccountName, String sasDefinitionName, String apiVersion, final ApiCallback<SasDefinitionBundle> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getSasDefinitionValidateBeforeCall(storageAccountName, sasDefinitionName, apiVersion, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SasDefinitionBundle>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getSasDefinitions
     * @param storageAccountName The name of the storage account. (required)
     * @param apiVersion Client API version. (required)
     * @param maxresults Maximum number of results to return in a page. If not specified the service will return up to 25 results. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getSasDefinitionsCall(String storageAccountName, String apiVersion, Integer maxresults, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/storage/{storage-account-name}/sas"
            .replaceAll("\\{" + "storage-account-name" + "\\}", apiClient.escapeString(storageAccountName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (maxresults != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("maxresults", maxresults));
        if (apiVersion != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("api-version", apiVersion));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getSasDefinitionsValidateBeforeCall(String storageAccountName, String apiVersion, Integer maxresults, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'storageAccountName' is set
        if (storageAccountName == null) {
            throw new ApiException("Missing the required parameter 'storageAccountName' when calling getSasDefinitions(Async)");
        }
        
        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling getSasDefinitions(Async)");
        }
        

        com.squareup.okhttp.Call call = getSasDefinitionsCall(storageAccountName, apiVersion, maxresults, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * List storage SAS definitions for the given storage account. This operation requires the storage/listsas permission.
     * @param storageAccountName The name of the storage account. (required)
     * @param apiVersion Client API version. (required)
     * @param maxresults Maximum number of results to return in a page. If not specified the service will return up to 25 results. (optional)
     * @return SasDefinitionListResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public SasDefinitionListResult getSasDefinitions(String storageAccountName, String apiVersion, Integer maxresults) throws ApiException {
        ApiResponse<SasDefinitionListResult> resp = getSasDefinitionsWithHttpInfo(storageAccountName, apiVersion, maxresults);
        return resp.getData();
    }

    /**
     * 
     * List storage SAS definitions for the given storage account. This operation requires the storage/listsas permission.
     * @param storageAccountName The name of the storage account. (required)
     * @param apiVersion Client API version. (required)
     * @param maxresults Maximum number of results to return in a page. If not specified the service will return up to 25 results. (optional)
     * @return ApiResponse&lt;SasDefinitionListResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<SasDefinitionListResult> getSasDefinitionsWithHttpInfo(String storageAccountName, String apiVersion, Integer maxresults) throws ApiException {
        com.squareup.okhttp.Call call = getSasDefinitionsValidateBeforeCall(storageAccountName, apiVersion, maxresults, null, null);
        Type localVarReturnType = new TypeToken<SasDefinitionListResult>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * List storage SAS definitions for the given storage account. This operation requires the storage/listsas permission.
     * @param storageAccountName The name of the storage account. (required)
     * @param apiVersion Client API version. (required)
     * @param maxresults Maximum number of results to return in a page. If not specified the service will return up to 25 results. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getSasDefinitionsAsync(String storageAccountName, String apiVersion, Integer maxresults, final ApiCallback<SasDefinitionListResult> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getSasDefinitionsValidateBeforeCall(storageAccountName, apiVersion, maxresults, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SasDefinitionListResult>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getStorageAccount
     * @param storageAccountName The name of the storage account. (required)
     * @param apiVersion Client API version. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getStorageAccountCall(String storageAccountName, String apiVersion, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/storage/{storage-account-name}"
            .replaceAll("\\{" + "storage-account-name" + "\\}", apiClient.escapeString(storageAccountName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (apiVersion != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("api-version", apiVersion));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getStorageAccountValidateBeforeCall(String storageAccountName, String apiVersion, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'storageAccountName' is set
        if (storageAccountName == null) {
            throw new ApiException("Missing the required parameter 'storageAccountName' when calling getStorageAccount(Async)");
        }
        
        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling getStorageAccount(Async)");
        }
        

        com.squareup.okhttp.Call call = getStorageAccountCall(storageAccountName, apiVersion, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Gets information about a specified storage account. This operation requires the storage/get permission.
     * @param storageAccountName The name of the storage account. (required)
     * @param apiVersion Client API version. (required)
     * @return StorageBundle
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public StorageBundle getStorageAccount(String storageAccountName, String apiVersion) throws ApiException {
        ApiResponse<StorageBundle> resp = getStorageAccountWithHttpInfo(storageAccountName, apiVersion);
        return resp.getData();
    }

    /**
     * 
     * Gets information about a specified storage account. This operation requires the storage/get permission.
     * @param storageAccountName The name of the storage account. (required)
     * @param apiVersion Client API version. (required)
     * @return ApiResponse&lt;StorageBundle&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<StorageBundle> getStorageAccountWithHttpInfo(String storageAccountName, String apiVersion) throws ApiException {
        com.squareup.okhttp.Call call = getStorageAccountValidateBeforeCall(storageAccountName, apiVersion, null, null);
        Type localVarReturnType = new TypeToken<StorageBundle>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Gets information about a specified storage account. This operation requires the storage/get permission.
     * @param storageAccountName The name of the storage account. (required)
     * @param apiVersion Client API version. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getStorageAccountAsync(String storageAccountName, String apiVersion, final ApiCallback<StorageBundle> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getStorageAccountValidateBeforeCall(storageAccountName, apiVersion, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<StorageBundle>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getStorageAccounts
     * @param apiVersion Client API version. (required)
     * @param maxresults Maximum number of results to return in a page. If not specified the service will return up to 25 results. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getStorageAccountsCall(String apiVersion, Integer maxresults, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/storage";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (maxresults != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("maxresults", maxresults));
        if (apiVersion != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("api-version", apiVersion));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getStorageAccountsValidateBeforeCall(String apiVersion, Integer maxresults, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling getStorageAccounts(Async)");
        }
        

        com.squareup.okhttp.Call call = getStorageAccountsCall(apiVersion, maxresults, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * List storage accounts managed by the specified key vault. This operation requires the storage/list permission.
     * @param apiVersion Client API version. (required)
     * @param maxresults Maximum number of results to return in a page. If not specified the service will return up to 25 results. (optional)
     * @return StorageListResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public StorageListResult getStorageAccounts(String apiVersion, Integer maxresults) throws ApiException {
        ApiResponse<StorageListResult> resp = getStorageAccountsWithHttpInfo(apiVersion, maxresults);
        return resp.getData();
    }

    /**
     * 
     * List storage accounts managed by the specified key vault. This operation requires the storage/list permission.
     * @param apiVersion Client API version. (required)
     * @param maxresults Maximum number of results to return in a page. If not specified the service will return up to 25 results. (optional)
     * @return ApiResponse&lt;StorageListResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<StorageListResult> getStorageAccountsWithHttpInfo(String apiVersion, Integer maxresults) throws ApiException {
        com.squareup.okhttp.Call call = getStorageAccountsValidateBeforeCall(apiVersion, maxresults, null, null);
        Type localVarReturnType = new TypeToken<StorageListResult>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * List storage accounts managed by the specified key vault. This operation requires the storage/list permission.
     * @param apiVersion Client API version. (required)
     * @param maxresults Maximum number of results to return in a page. If not specified the service will return up to 25 results. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getStorageAccountsAsync(String apiVersion, Integer maxresults, final ApiCallback<StorageListResult> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getStorageAccountsValidateBeforeCall(apiVersion, maxresults, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<StorageListResult>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for regenerateStorageAccountKey
     * @param storageAccountName The name of the storage account. (required)
     * @param parameters The parameters to regenerate storage account key. (required)
     * @param apiVersion Client API version. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call regenerateStorageAccountKeyCall(String storageAccountName, StorageAccountRegenerteKeyParameters parameters, String apiVersion, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = parameters;

        // create path and map variables
        String localVarPath = "/storage/{storage-account-name}/regeneratekey"
            .replaceAll("\\{" + "storage-account-name" + "\\}", apiClient.escapeString(storageAccountName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (apiVersion != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("api-version", apiVersion));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call regenerateStorageAccountKeyValidateBeforeCall(String storageAccountName, StorageAccountRegenerteKeyParameters parameters, String apiVersion, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'storageAccountName' is set
        if (storageAccountName == null) {
            throw new ApiException("Missing the required parameter 'storageAccountName' when calling regenerateStorageAccountKey(Async)");
        }
        
        // verify the required parameter 'parameters' is set
        if (parameters == null) {
            throw new ApiException("Missing the required parameter 'parameters' when calling regenerateStorageAccountKey(Async)");
        }
        
        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling regenerateStorageAccountKey(Async)");
        }
        

        com.squareup.okhttp.Call call = regenerateStorageAccountKeyCall(storageAccountName, parameters, apiVersion, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Regenerates the specified key value for the given storage account. This operation requires the storage/regeneratekey permission.
     * @param storageAccountName The name of the storage account. (required)
     * @param parameters The parameters to regenerate storage account key. (required)
     * @param apiVersion Client API version. (required)
     * @return StorageBundle
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public StorageBundle regenerateStorageAccountKey(String storageAccountName, StorageAccountRegenerteKeyParameters parameters, String apiVersion) throws ApiException {
        ApiResponse<StorageBundle> resp = regenerateStorageAccountKeyWithHttpInfo(storageAccountName, parameters, apiVersion);
        return resp.getData();
    }

    /**
     * 
     * Regenerates the specified key value for the given storage account. This operation requires the storage/regeneratekey permission.
     * @param storageAccountName The name of the storage account. (required)
     * @param parameters The parameters to regenerate storage account key. (required)
     * @param apiVersion Client API version. (required)
     * @return ApiResponse&lt;StorageBundle&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<StorageBundle> regenerateStorageAccountKeyWithHttpInfo(String storageAccountName, StorageAccountRegenerteKeyParameters parameters, String apiVersion) throws ApiException {
        com.squareup.okhttp.Call call = regenerateStorageAccountKeyValidateBeforeCall(storageAccountName, parameters, apiVersion, null, null);
        Type localVarReturnType = new TypeToken<StorageBundle>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Regenerates the specified key value for the given storage account. This operation requires the storage/regeneratekey permission.
     * @param storageAccountName The name of the storage account. (required)
     * @param parameters The parameters to regenerate storage account key. (required)
     * @param apiVersion Client API version. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call regenerateStorageAccountKeyAsync(String storageAccountName, StorageAccountRegenerteKeyParameters parameters, String apiVersion, final ApiCallback<StorageBundle> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = regenerateStorageAccountKeyValidateBeforeCall(storageAccountName, parameters, apiVersion, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<StorageBundle>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for setSasDefinition
     * @param storageAccountName The name of the storage account. (required)
     * @param sasDefinitionName The name of the SAS definition. (required)
     * @param parameters The parameters to create a SAS definition. (required)
     * @param apiVersion Client API version. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call setSasDefinitionCall(String storageAccountName, String sasDefinitionName, SasDefinitionCreateParameters parameters, String apiVersion, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = parameters;

        // create path and map variables
        String localVarPath = "/storage/{storage-account-name}/sas/{sas-definition-name}"
            .replaceAll("\\{" + "storage-account-name" + "\\}", apiClient.escapeString(storageAccountName.toString()))
            .replaceAll("\\{" + "sas-definition-name" + "\\}", apiClient.escapeString(sasDefinitionName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (apiVersion != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("api-version", apiVersion));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call setSasDefinitionValidateBeforeCall(String storageAccountName, String sasDefinitionName, SasDefinitionCreateParameters parameters, String apiVersion, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'storageAccountName' is set
        if (storageAccountName == null) {
            throw new ApiException("Missing the required parameter 'storageAccountName' when calling setSasDefinition(Async)");
        }
        
        // verify the required parameter 'sasDefinitionName' is set
        if (sasDefinitionName == null) {
            throw new ApiException("Missing the required parameter 'sasDefinitionName' when calling setSasDefinition(Async)");
        }
        
        // verify the required parameter 'parameters' is set
        if (parameters == null) {
            throw new ApiException("Missing the required parameter 'parameters' when calling setSasDefinition(Async)");
        }
        
        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling setSasDefinition(Async)");
        }
        

        com.squareup.okhttp.Call call = setSasDefinitionCall(storageAccountName, sasDefinitionName, parameters, apiVersion, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Creates or updates a new SAS definition for the specified storage account. This operation requires the storage/setsas permission.
     * @param storageAccountName The name of the storage account. (required)
     * @param sasDefinitionName The name of the SAS definition. (required)
     * @param parameters The parameters to create a SAS definition. (required)
     * @param apiVersion Client API version. (required)
     * @return SasDefinitionBundle
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public SasDefinitionBundle setSasDefinition(String storageAccountName, String sasDefinitionName, SasDefinitionCreateParameters parameters, String apiVersion) throws ApiException {
        ApiResponse<SasDefinitionBundle> resp = setSasDefinitionWithHttpInfo(storageAccountName, sasDefinitionName, parameters, apiVersion);
        return resp.getData();
    }

    /**
     * 
     * Creates or updates a new SAS definition for the specified storage account. This operation requires the storage/setsas permission.
     * @param storageAccountName The name of the storage account. (required)
     * @param sasDefinitionName The name of the SAS definition. (required)
     * @param parameters The parameters to create a SAS definition. (required)
     * @param apiVersion Client API version. (required)
     * @return ApiResponse&lt;SasDefinitionBundle&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<SasDefinitionBundle> setSasDefinitionWithHttpInfo(String storageAccountName, String sasDefinitionName, SasDefinitionCreateParameters parameters, String apiVersion) throws ApiException {
        com.squareup.okhttp.Call call = setSasDefinitionValidateBeforeCall(storageAccountName, sasDefinitionName, parameters, apiVersion, null, null);
        Type localVarReturnType = new TypeToken<SasDefinitionBundle>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Creates or updates a new SAS definition for the specified storage account. This operation requires the storage/setsas permission.
     * @param storageAccountName The name of the storage account. (required)
     * @param sasDefinitionName The name of the SAS definition. (required)
     * @param parameters The parameters to create a SAS definition. (required)
     * @param apiVersion Client API version. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call setSasDefinitionAsync(String storageAccountName, String sasDefinitionName, SasDefinitionCreateParameters parameters, String apiVersion, final ApiCallback<SasDefinitionBundle> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = setSasDefinitionValidateBeforeCall(storageAccountName, sasDefinitionName, parameters, apiVersion, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SasDefinitionBundle>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for setStorageAccount
     * @param storageAccountName The name of the storage account. (required)
     * @param parameters The parameters to create a storage account. (required)
     * @param apiVersion Client API version. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call setStorageAccountCall(String storageAccountName, StorageAccountCreateParameters parameters, String apiVersion, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = parameters;

        // create path and map variables
        String localVarPath = "/storage/{storage-account-name}"
            .replaceAll("\\{" + "storage-account-name" + "\\}", apiClient.escapeString(storageAccountName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (apiVersion != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("api-version", apiVersion));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call setStorageAccountValidateBeforeCall(String storageAccountName, StorageAccountCreateParameters parameters, String apiVersion, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'storageAccountName' is set
        if (storageAccountName == null) {
            throw new ApiException("Missing the required parameter 'storageAccountName' when calling setStorageAccount(Async)");
        }
        
        // verify the required parameter 'parameters' is set
        if (parameters == null) {
            throw new ApiException("Missing the required parameter 'parameters' when calling setStorageAccount(Async)");
        }
        
        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling setStorageAccount(Async)");
        }
        

        com.squareup.okhttp.Call call = setStorageAccountCall(storageAccountName, parameters, apiVersion, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Creates or updates a new storage account. This operation requires the storage/set permission.
     * @param storageAccountName The name of the storage account. (required)
     * @param parameters The parameters to create a storage account. (required)
     * @param apiVersion Client API version. (required)
     * @return StorageBundle
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public StorageBundle setStorageAccount(String storageAccountName, StorageAccountCreateParameters parameters, String apiVersion) throws ApiException {
        ApiResponse<StorageBundle> resp = setStorageAccountWithHttpInfo(storageAccountName, parameters, apiVersion);
        return resp.getData();
    }

    /**
     * 
     * Creates or updates a new storage account. This operation requires the storage/set permission.
     * @param storageAccountName The name of the storage account. (required)
     * @param parameters The parameters to create a storage account. (required)
     * @param apiVersion Client API version. (required)
     * @return ApiResponse&lt;StorageBundle&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<StorageBundle> setStorageAccountWithHttpInfo(String storageAccountName, StorageAccountCreateParameters parameters, String apiVersion) throws ApiException {
        com.squareup.okhttp.Call call = setStorageAccountValidateBeforeCall(storageAccountName, parameters, apiVersion, null, null);
        Type localVarReturnType = new TypeToken<StorageBundle>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Creates or updates a new storage account. This operation requires the storage/set permission.
     * @param storageAccountName The name of the storage account. (required)
     * @param parameters The parameters to create a storage account. (required)
     * @param apiVersion Client API version. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call setStorageAccountAsync(String storageAccountName, StorageAccountCreateParameters parameters, String apiVersion, final ApiCallback<StorageBundle> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = setStorageAccountValidateBeforeCall(storageAccountName, parameters, apiVersion, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<StorageBundle>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updateSasDefinition
     * @param storageAccountName The name of the storage account. (required)
     * @param sasDefinitionName The name of the SAS definition. (required)
     * @param parameters The parameters to update a SAS definition. (required)
     * @param apiVersion Client API version. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateSasDefinitionCall(String storageAccountName, String sasDefinitionName, SasDefinitionUpdateParameters parameters, String apiVersion, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = parameters;

        // create path and map variables
        String localVarPath = "/storage/{storage-account-name}/sas/{sas-definition-name}"
            .replaceAll("\\{" + "storage-account-name" + "\\}", apiClient.escapeString(storageAccountName.toString()))
            .replaceAll("\\{" + "sas-definition-name" + "\\}", apiClient.escapeString(sasDefinitionName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (apiVersion != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("api-version", apiVersion));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateSasDefinitionValidateBeforeCall(String storageAccountName, String sasDefinitionName, SasDefinitionUpdateParameters parameters, String apiVersion, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'storageAccountName' is set
        if (storageAccountName == null) {
            throw new ApiException("Missing the required parameter 'storageAccountName' when calling updateSasDefinition(Async)");
        }
        
        // verify the required parameter 'sasDefinitionName' is set
        if (sasDefinitionName == null) {
            throw new ApiException("Missing the required parameter 'sasDefinitionName' when calling updateSasDefinition(Async)");
        }
        
        // verify the required parameter 'parameters' is set
        if (parameters == null) {
            throw new ApiException("Missing the required parameter 'parameters' when calling updateSasDefinition(Async)");
        }
        
        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling updateSasDefinition(Async)");
        }
        

        com.squareup.okhttp.Call call = updateSasDefinitionCall(storageAccountName, sasDefinitionName, parameters, apiVersion, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Updates the specified attributes associated with the given SAS definition. This operation requires the storage/setsas permission.
     * @param storageAccountName The name of the storage account. (required)
     * @param sasDefinitionName The name of the SAS definition. (required)
     * @param parameters The parameters to update a SAS definition. (required)
     * @param apiVersion Client API version. (required)
     * @return SasDefinitionBundle
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public SasDefinitionBundle updateSasDefinition(String storageAccountName, String sasDefinitionName, SasDefinitionUpdateParameters parameters, String apiVersion) throws ApiException {
        ApiResponse<SasDefinitionBundle> resp = updateSasDefinitionWithHttpInfo(storageAccountName, sasDefinitionName, parameters, apiVersion);
        return resp.getData();
    }

    /**
     * 
     * Updates the specified attributes associated with the given SAS definition. This operation requires the storage/setsas permission.
     * @param storageAccountName The name of the storage account. (required)
     * @param sasDefinitionName The name of the SAS definition. (required)
     * @param parameters The parameters to update a SAS definition. (required)
     * @param apiVersion Client API version. (required)
     * @return ApiResponse&lt;SasDefinitionBundle&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<SasDefinitionBundle> updateSasDefinitionWithHttpInfo(String storageAccountName, String sasDefinitionName, SasDefinitionUpdateParameters parameters, String apiVersion) throws ApiException {
        com.squareup.okhttp.Call call = updateSasDefinitionValidateBeforeCall(storageAccountName, sasDefinitionName, parameters, apiVersion, null, null);
        Type localVarReturnType = new TypeToken<SasDefinitionBundle>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Updates the specified attributes associated with the given SAS definition. This operation requires the storage/setsas permission.
     * @param storageAccountName The name of the storage account. (required)
     * @param sasDefinitionName The name of the SAS definition. (required)
     * @param parameters The parameters to update a SAS definition. (required)
     * @param apiVersion Client API version. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateSasDefinitionAsync(String storageAccountName, String sasDefinitionName, SasDefinitionUpdateParameters parameters, String apiVersion, final ApiCallback<SasDefinitionBundle> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateSasDefinitionValidateBeforeCall(storageAccountName, sasDefinitionName, parameters, apiVersion, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SasDefinitionBundle>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updateStorageAccount
     * @param storageAccountName The name of the storage account. (required)
     * @param parameters The parameters to update a storage account. (required)
     * @param apiVersion Client API version. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateStorageAccountCall(String storageAccountName, StorageAccountUpdateParameters parameters, String apiVersion, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = parameters;

        // create path and map variables
        String localVarPath = "/storage/{storage-account-name}"
            .replaceAll("\\{" + "storage-account-name" + "\\}", apiClient.escapeString(storageAccountName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (apiVersion != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("api-version", apiVersion));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateStorageAccountValidateBeforeCall(String storageAccountName, StorageAccountUpdateParameters parameters, String apiVersion, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'storageAccountName' is set
        if (storageAccountName == null) {
            throw new ApiException("Missing the required parameter 'storageAccountName' when calling updateStorageAccount(Async)");
        }
        
        // verify the required parameter 'parameters' is set
        if (parameters == null) {
            throw new ApiException("Missing the required parameter 'parameters' when calling updateStorageAccount(Async)");
        }
        
        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling updateStorageAccount(Async)");
        }
        

        com.squareup.okhttp.Call call = updateStorageAccountCall(storageAccountName, parameters, apiVersion, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Updates the specified attributes associated with the given storage account. This operation requires the storage/set/update permission.
     * @param storageAccountName The name of the storage account. (required)
     * @param parameters The parameters to update a storage account. (required)
     * @param apiVersion Client API version. (required)
     * @return StorageBundle
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public StorageBundle updateStorageAccount(String storageAccountName, StorageAccountUpdateParameters parameters, String apiVersion) throws ApiException {
        ApiResponse<StorageBundle> resp = updateStorageAccountWithHttpInfo(storageAccountName, parameters, apiVersion);
        return resp.getData();
    }

    /**
     * 
     * Updates the specified attributes associated with the given storage account. This operation requires the storage/set/update permission.
     * @param storageAccountName The name of the storage account. (required)
     * @param parameters The parameters to update a storage account. (required)
     * @param apiVersion Client API version. (required)
     * @return ApiResponse&lt;StorageBundle&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<StorageBundle> updateStorageAccountWithHttpInfo(String storageAccountName, StorageAccountUpdateParameters parameters, String apiVersion) throws ApiException {
        com.squareup.okhttp.Call call = updateStorageAccountValidateBeforeCall(storageAccountName, parameters, apiVersion, null, null);
        Type localVarReturnType = new TypeToken<StorageBundle>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Updates the specified attributes associated with the given storage account. This operation requires the storage/set/update permission.
     * @param storageAccountName The name of the storage account. (required)
     * @param parameters The parameters to update a storage account. (required)
     * @param apiVersion Client API version. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateStorageAccountAsync(String storageAccountName, StorageAccountUpdateParameters parameters, String apiVersion, final ApiCallback<StorageBundle> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateStorageAccountValidateBeforeCall(storageAccountName, parameters, apiVersion, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<StorageBundle>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
