/*
 * KeyVaultClient
 * The key vault client performs cryptographic key operations and vault operations against the Key Vault service.
 *
 * OpenAPI spec version: 2016-10-01
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.microsoft.identity.internal.test.keyvault.api;

import com.microsoft.identity.internal.test.keyvault.ApiCallback;
import com.microsoft.identity.internal.test.keyvault.ApiClient;
import com.microsoft.identity.internal.test.keyvault.ApiException;
import com.microsoft.identity.internal.test.keyvault.ApiResponse;
import com.microsoft.identity.internal.test.keyvault.Configuration;
import com.microsoft.identity.internal.test.keyvault.Pair;
import com.microsoft.identity.internal.test.keyvault.ProgressRequestBody;
import com.microsoft.identity.internal.test.keyvault.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;
import com.microsoft.identity.internal.test.keyvault.model.CertificateBundle;
import com.microsoft.identity.internal.test.keyvault.model.CertificateCreateParameters;
import com.microsoft.identity.internal.test.keyvault.model.CertificateImportParameters;
import com.microsoft.identity.internal.test.keyvault.model.CertificateIssuerListResult;
import com.microsoft.identity.internal.test.keyvault.model.CertificateIssuerSetParameters;
import com.microsoft.identity.internal.test.keyvault.model.CertificateIssuerUpdateParameters;
import com.microsoft.identity.internal.test.keyvault.model.CertificateListResult;
import com.microsoft.identity.internal.test.keyvault.model.CertificateMergeParameters;
import com.microsoft.identity.internal.test.keyvault.model.CertificateOperation;
import com.microsoft.identity.internal.test.keyvault.model.CertificateOperationUpdateParameter;
import com.microsoft.identity.internal.test.keyvault.model.CertificatePolicy;
import com.microsoft.identity.internal.test.keyvault.model.CertificateUpdateParameters;
import com.microsoft.identity.internal.test.keyvault.model.Contacts;
import com.microsoft.identity.internal.test.keyvault.model.DeletedCertificateBundle;
import com.microsoft.identity.internal.test.keyvault.model.IssuerBundle;

import java.io.IOException;


import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class CertificatesApi {
    private ApiClient apiClient;

    public CertificatesApi() {
        this(Configuration.getDefaultApiClient());
    }

    public CertificatesApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for createCertificate
     * @param certificateName The name of the certificate. (required)
     * @param parameters The parameters to create a certificate. (required)
     * @param apiVersion Client API version. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createCertificateCall(String certificateName, CertificateCreateParameters parameters, String apiVersion, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = parameters;

        // create path and map variables
        String localVarPath = "/certificates/{certificate-name}/create"
            .replaceAll("\\{" + "certificate-name" + "\\}", apiClient.escapeString(certificateName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (apiVersion != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("api-version", apiVersion));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createCertificateValidateBeforeCall(String certificateName, CertificateCreateParameters parameters, String apiVersion, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'certificateName' is set
        if (certificateName == null) {
            throw new ApiException("Missing the required parameter 'certificateName' when calling createCertificate(Async)");
        }
        
        // verify the required parameter 'parameters' is set
        if (parameters == null) {
            throw new ApiException("Missing the required parameter 'parameters' when calling createCertificate(Async)");
        }
        
        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling createCertificate(Async)");
        }
        

        com.squareup.okhttp.Call call = createCertificateCall(certificateName, parameters, apiVersion, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Creates a new certificate.
     * If this is the first version, the certificate resource is created. This operation requires the certificates/create permission.
     * @param certificateName The name of the certificate. (required)
     * @param parameters The parameters to create a certificate. (required)
     * @param apiVersion Client API version. (required)
     * @return CertificateOperation
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CertificateOperation createCertificate(String certificateName, CertificateCreateParameters parameters, String apiVersion) throws ApiException {
        ApiResponse<CertificateOperation> resp = createCertificateWithHttpInfo(certificateName, parameters, apiVersion);
        return resp.getData();
    }

    /**
     * Creates a new certificate.
     * If this is the first version, the certificate resource is created. This operation requires the certificates/create permission.
     * @param certificateName The name of the certificate. (required)
     * @param parameters The parameters to create a certificate. (required)
     * @param apiVersion Client API version. (required)
     * @return ApiResponse&lt;CertificateOperation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CertificateOperation> createCertificateWithHttpInfo(String certificateName, CertificateCreateParameters parameters, String apiVersion) throws ApiException {
        com.squareup.okhttp.Call call = createCertificateValidateBeforeCall(certificateName, parameters, apiVersion, null, null);
        Type localVarReturnType = new TypeToken<CertificateOperation>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Creates a new certificate. (asynchronously)
     * If this is the first version, the certificate resource is created. This operation requires the certificates/create permission.
     * @param certificateName The name of the certificate. (required)
     * @param parameters The parameters to create a certificate. (required)
     * @param apiVersion Client API version. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createCertificateAsync(String certificateName, CertificateCreateParameters parameters, String apiVersion, final ApiCallback<CertificateOperation> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createCertificateValidateBeforeCall(certificateName, parameters, apiVersion, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CertificateOperation>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for deleteCertificate
     * @param certificateName The name of the certificate. (required)
     * @param apiVersion Client API version. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteCertificateCall(String certificateName, String apiVersion, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/certificates/{certificate-name}"
            .replaceAll("\\{" + "certificate-name" + "\\}", apiClient.escapeString(certificateName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (apiVersion != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("api-version", apiVersion));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteCertificateValidateBeforeCall(String certificateName, String apiVersion, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'certificateName' is set
        if (certificateName == null) {
            throw new ApiException("Missing the required parameter 'certificateName' when calling deleteCertificate(Async)");
        }
        
        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling deleteCertificate(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteCertificateCall(certificateName, apiVersion, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Deletes a certificate from a specified key vault.
     * Deletes all versions of a certificate object along with its associated policy. Delete certificate cannot be used to remove individual versions of a certificate object. This operation requires the certificates/delete permission.
     * @param certificateName The name of the certificate. (required)
     * @param apiVersion Client API version. (required)
     * @return DeletedCertificateBundle
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public DeletedCertificateBundle deleteCertificate(String certificateName, String apiVersion) throws ApiException {
        ApiResponse<DeletedCertificateBundle> resp = deleteCertificateWithHttpInfo(certificateName, apiVersion);
        return resp.getData();
    }

    /**
     * Deletes a certificate from a specified key vault.
     * Deletes all versions of a certificate object along with its associated policy. Delete certificate cannot be used to remove individual versions of a certificate object. This operation requires the certificates/delete permission.
     * @param certificateName The name of the certificate. (required)
     * @param apiVersion Client API version. (required)
     * @return ApiResponse&lt;DeletedCertificateBundle&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<DeletedCertificateBundle> deleteCertificateWithHttpInfo(String certificateName, String apiVersion) throws ApiException {
        com.squareup.okhttp.Call call = deleteCertificateValidateBeforeCall(certificateName, apiVersion, null, null);
        Type localVarReturnType = new TypeToken<DeletedCertificateBundle>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Deletes a certificate from a specified key vault. (asynchronously)
     * Deletes all versions of a certificate object along with its associated policy. Delete certificate cannot be used to remove individual versions of a certificate object. This operation requires the certificates/delete permission.
     * @param certificateName The name of the certificate. (required)
     * @param apiVersion Client API version. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteCertificateAsync(String certificateName, String apiVersion, final ApiCallback<DeletedCertificateBundle> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteCertificateValidateBeforeCall(certificateName, apiVersion, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<DeletedCertificateBundle>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for deleteCertificateContacts
     * @param apiVersion Client API version. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteCertificateContactsCall(String apiVersion, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/certificates/contacts";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (apiVersion != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("api-version", apiVersion));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteCertificateContactsValidateBeforeCall(String apiVersion, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling deleteCertificateContacts(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteCertificateContactsCall(apiVersion, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Deletes the certificate contacts for a specified key vault.
     * Deletes the certificate contacts for a specified key vault certificate. This operation requires the certificates/managecontacts permission.
     * @param apiVersion Client API version. (required)
     * @return Contacts
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Contacts deleteCertificateContacts(String apiVersion) throws ApiException {
        ApiResponse<Contacts> resp = deleteCertificateContactsWithHttpInfo(apiVersion);
        return resp.getData();
    }

    /**
     * Deletes the certificate contacts for a specified key vault.
     * Deletes the certificate contacts for a specified key vault certificate. This operation requires the certificates/managecontacts permission.
     * @param apiVersion Client API version. (required)
     * @return ApiResponse&lt;Contacts&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Contacts> deleteCertificateContactsWithHttpInfo(String apiVersion) throws ApiException {
        com.squareup.okhttp.Call call = deleteCertificateContactsValidateBeforeCall(apiVersion, null, null);
        Type localVarReturnType = new TypeToken<Contacts>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Deletes the certificate contacts for a specified key vault. (asynchronously)
     * Deletes the certificate contacts for a specified key vault certificate. This operation requires the certificates/managecontacts permission.
     * @param apiVersion Client API version. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteCertificateContactsAsync(String apiVersion, final ApiCallback<Contacts> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteCertificateContactsValidateBeforeCall(apiVersion, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Contacts>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for deleteCertificateIssuer
     * @param issuerName The name of the issuer. (required)
     * @param apiVersion Client API version. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteCertificateIssuerCall(String issuerName, String apiVersion, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/certificates/issuers/{issuer-name}"
            .replaceAll("\\{" + "issuer-name" + "\\}", apiClient.escapeString(issuerName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (apiVersion != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("api-version", apiVersion));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteCertificateIssuerValidateBeforeCall(String issuerName, String apiVersion, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'issuerName' is set
        if (issuerName == null) {
            throw new ApiException("Missing the required parameter 'issuerName' when calling deleteCertificateIssuer(Async)");
        }
        
        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling deleteCertificateIssuer(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteCertificateIssuerCall(issuerName, apiVersion, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Deletes the specified certificate issuer.
     * The DeleteCertificateIssuer operation permanently removes the specified certificate issuer from the vault. This operation requires the certificates/manageissuers/deleteissuers permission.
     * @param issuerName The name of the issuer. (required)
     * @param apiVersion Client API version. (required)
     * @return IssuerBundle
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public IssuerBundle deleteCertificateIssuer(String issuerName, String apiVersion) throws ApiException {
        ApiResponse<IssuerBundle> resp = deleteCertificateIssuerWithHttpInfo(issuerName, apiVersion);
        return resp.getData();
    }

    /**
     * Deletes the specified certificate issuer.
     * The DeleteCertificateIssuer operation permanently removes the specified certificate issuer from the vault. This operation requires the certificates/manageissuers/deleteissuers permission.
     * @param issuerName The name of the issuer. (required)
     * @param apiVersion Client API version. (required)
     * @return ApiResponse&lt;IssuerBundle&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<IssuerBundle> deleteCertificateIssuerWithHttpInfo(String issuerName, String apiVersion) throws ApiException {
        com.squareup.okhttp.Call call = deleteCertificateIssuerValidateBeforeCall(issuerName, apiVersion, null, null);
        Type localVarReturnType = new TypeToken<IssuerBundle>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Deletes the specified certificate issuer. (asynchronously)
     * The DeleteCertificateIssuer operation permanently removes the specified certificate issuer from the vault. This operation requires the certificates/manageissuers/deleteissuers permission.
     * @param issuerName The name of the issuer. (required)
     * @param apiVersion Client API version. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteCertificateIssuerAsync(String issuerName, String apiVersion, final ApiCallback<IssuerBundle> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteCertificateIssuerValidateBeforeCall(issuerName, apiVersion, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<IssuerBundle>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for deleteCertificateOperation
     * @param certificateName The name of the certificate. (required)
     * @param apiVersion Client API version. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteCertificateOperationCall(String certificateName, String apiVersion, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/certificates/{certificate-name}/pending"
            .replaceAll("\\{" + "certificate-name" + "\\}", apiClient.escapeString(certificateName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (apiVersion != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("api-version", apiVersion));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteCertificateOperationValidateBeforeCall(String certificateName, String apiVersion, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'certificateName' is set
        if (certificateName == null) {
            throw new ApiException("Missing the required parameter 'certificateName' when calling deleteCertificateOperation(Async)");
        }
        
        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling deleteCertificateOperation(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteCertificateOperationCall(certificateName, apiVersion, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Deletes the creation operation for a specific certificate.
     * Deletes the creation operation for a specified certificate that is in the process of being created. The certificate is no longer created. This operation requires the certificates/update permission.
     * @param certificateName The name of the certificate. (required)
     * @param apiVersion Client API version. (required)
     * @return CertificateOperation
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CertificateOperation deleteCertificateOperation(String certificateName, String apiVersion) throws ApiException {
        ApiResponse<CertificateOperation> resp = deleteCertificateOperationWithHttpInfo(certificateName, apiVersion);
        return resp.getData();
    }

    /**
     * Deletes the creation operation for a specific certificate.
     * Deletes the creation operation for a specified certificate that is in the process of being created. The certificate is no longer created. This operation requires the certificates/update permission.
     * @param certificateName The name of the certificate. (required)
     * @param apiVersion Client API version. (required)
     * @return ApiResponse&lt;CertificateOperation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CertificateOperation> deleteCertificateOperationWithHttpInfo(String certificateName, String apiVersion) throws ApiException {
        com.squareup.okhttp.Call call = deleteCertificateOperationValidateBeforeCall(certificateName, apiVersion, null, null);
        Type localVarReturnType = new TypeToken<CertificateOperation>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Deletes the creation operation for a specific certificate. (asynchronously)
     * Deletes the creation operation for a specified certificate that is in the process of being created. The certificate is no longer created. This operation requires the certificates/update permission.
     * @param certificateName The name of the certificate. (required)
     * @param apiVersion Client API version. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteCertificateOperationAsync(String certificateName, String apiVersion, final ApiCallback<CertificateOperation> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteCertificateOperationValidateBeforeCall(certificateName, apiVersion, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CertificateOperation>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getCertificate
     * @param certificateName The name of the certificate in the given vault. (required)
     * @param certificateVersion The version of the certificate. (required)
     * @param apiVersion Client API version. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getCertificateCall(String certificateName, String certificateVersion, String apiVersion, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/certificates/{certificate-name}/{certificate-version}"
            .replaceAll("\\{" + "certificate-name" + "\\}", apiClient.escapeString(certificateName.toString()))
            .replaceAll("\\{" + "certificate-version" + "\\}", apiClient.escapeString(certificateVersion.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (apiVersion != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("api-version", apiVersion));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getCertificateValidateBeforeCall(String certificateName, String certificateVersion, String apiVersion, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'certificateName' is set
        if (certificateName == null) {
            throw new ApiException("Missing the required parameter 'certificateName' when calling getCertificate(Async)");
        }
        
        // verify the required parameter 'certificateVersion' is set
        if (certificateVersion == null) {
            throw new ApiException("Missing the required parameter 'certificateVersion' when calling getCertificate(Async)");
        }
        
        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling getCertificate(Async)");
        }
        

        com.squareup.okhttp.Call call = getCertificateCall(certificateName, certificateVersion, apiVersion, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Gets information about a certificate.
     * Gets information about a specific certificate. This operation requires the certificates/get permission.
     * @param certificateName The name of the certificate in the given vault. (required)
     * @param certificateVersion The version of the certificate. (required)
     * @param apiVersion Client API version. (required)
     * @return CertificateBundle
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CertificateBundle getCertificate(String certificateName, String certificateVersion, String apiVersion) throws ApiException {
        ApiResponse<CertificateBundle> resp = getCertificateWithHttpInfo(certificateName, certificateVersion, apiVersion);
        return resp.getData();
    }

    /**
     * Gets information about a certificate.
     * Gets information about a specific certificate. This operation requires the certificates/get permission.
     * @param certificateName The name of the certificate in the given vault. (required)
     * @param certificateVersion The version of the certificate. (required)
     * @param apiVersion Client API version. (required)
     * @return ApiResponse&lt;CertificateBundle&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CertificateBundle> getCertificateWithHttpInfo(String certificateName, String certificateVersion, String apiVersion) throws ApiException {
        com.squareup.okhttp.Call call = getCertificateValidateBeforeCall(certificateName, certificateVersion, apiVersion, null, null);
        Type localVarReturnType = new TypeToken<CertificateBundle>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Gets information about a certificate. (asynchronously)
     * Gets information about a specific certificate. This operation requires the certificates/get permission.
     * @param certificateName The name of the certificate in the given vault. (required)
     * @param certificateVersion The version of the certificate. (required)
     * @param apiVersion Client API version. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getCertificateAsync(String certificateName, String certificateVersion, String apiVersion, final ApiCallback<CertificateBundle> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getCertificateValidateBeforeCall(certificateName, certificateVersion, apiVersion, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CertificateBundle>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getCertificateContacts
     * @param apiVersion Client API version. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getCertificateContactsCall(String apiVersion, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/certificates/contacts";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (apiVersion != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("api-version", apiVersion));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getCertificateContactsValidateBeforeCall(String apiVersion, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling getCertificateContacts(Async)");
        }
        

        com.squareup.okhttp.Call call = getCertificateContactsCall(apiVersion, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Lists the certificate contacts for a specified key vault.
     * The GetCertificateContacts operation returns the set of certificate contact resources in the specified key vault. This operation requires the certificates/managecontacts permission.
     * @param apiVersion Client API version. (required)
     * @return Contacts
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Contacts getCertificateContacts(String apiVersion) throws ApiException {
        ApiResponse<Contacts> resp = getCertificateContactsWithHttpInfo(apiVersion);
        return resp.getData();
    }

    /**
     * Lists the certificate contacts for a specified key vault.
     * The GetCertificateContacts operation returns the set of certificate contact resources in the specified key vault. This operation requires the certificates/managecontacts permission.
     * @param apiVersion Client API version. (required)
     * @return ApiResponse&lt;Contacts&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Contacts> getCertificateContactsWithHttpInfo(String apiVersion) throws ApiException {
        com.squareup.okhttp.Call call = getCertificateContactsValidateBeforeCall(apiVersion, null, null);
        Type localVarReturnType = new TypeToken<Contacts>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Lists the certificate contacts for a specified key vault. (asynchronously)
     * The GetCertificateContacts operation returns the set of certificate contact resources in the specified key vault. This operation requires the certificates/managecontacts permission.
     * @param apiVersion Client API version. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getCertificateContactsAsync(String apiVersion, final ApiCallback<Contacts> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getCertificateContactsValidateBeforeCall(apiVersion, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Contacts>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getCertificateIssuer
     * @param issuerName The name of the issuer. (required)
     * @param apiVersion Client API version. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getCertificateIssuerCall(String issuerName, String apiVersion, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/certificates/issuers/{issuer-name}"
            .replaceAll("\\{" + "issuer-name" + "\\}", apiClient.escapeString(issuerName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (apiVersion != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("api-version", apiVersion));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getCertificateIssuerValidateBeforeCall(String issuerName, String apiVersion, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'issuerName' is set
        if (issuerName == null) {
            throw new ApiException("Missing the required parameter 'issuerName' when calling getCertificateIssuer(Async)");
        }
        
        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling getCertificateIssuer(Async)");
        }
        

        com.squareup.okhttp.Call call = getCertificateIssuerCall(issuerName, apiVersion, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Lists the specified certificate issuer.
     * The GetCertificateIssuer operation returns the specified certificate issuer resources in the specified key vault. This operation requires the certificates/manageissuers/getissuers permission.
     * @param issuerName The name of the issuer. (required)
     * @param apiVersion Client API version. (required)
     * @return IssuerBundle
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public IssuerBundle getCertificateIssuer(String issuerName, String apiVersion) throws ApiException {
        ApiResponse<IssuerBundle> resp = getCertificateIssuerWithHttpInfo(issuerName, apiVersion);
        return resp.getData();
    }

    /**
     * Lists the specified certificate issuer.
     * The GetCertificateIssuer operation returns the specified certificate issuer resources in the specified key vault. This operation requires the certificates/manageissuers/getissuers permission.
     * @param issuerName The name of the issuer. (required)
     * @param apiVersion Client API version. (required)
     * @return ApiResponse&lt;IssuerBundle&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<IssuerBundle> getCertificateIssuerWithHttpInfo(String issuerName, String apiVersion) throws ApiException {
        com.squareup.okhttp.Call call = getCertificateIssuerValidateBeforeCall(issuerName, apiVersion, null, null);
        Type localVarReturnType = new TypeToken<IssuerBundle>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Lists the specified certificate issuer. (asynchronously)
     * The GetCertificateIssuer operation returns the specified certificate issuer resources in the specified key vault. This operation requires the certificates/manageissuers/getissuers permission.
     * @param issuerName The name of the issuer. (required)
     * @param apiVersion Client API version. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getCertificateIssuerAsync(String issuerName, String apiVersion, final ApiCallback<IssuerBundle> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getCertificateIssuerValidateBeforeCall(issuerName, apiVersion, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<IssuerBundle>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getCertificateIssuers
     * @param apiVersion Client API version. (required)
     * @param maxresults Maximum number of results to return in a page. If not specified the service will return up to 25 results. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getCertificateIssuersCall(String apiVersion, Integer maxresults, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/certificates/issuers";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (maxresults != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("maxresults", maxresults));
        if (apiVersion != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("api-version", apiVersion));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getCertificateIssuersValidateBeforeCall(String apiVersion, Integer maxresults, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling getCertificateIssuers(Async)");
        }
        

        com.squareup.okhttp.Call call = getCertificateIssuersCall(apiVersion, maxresults, progressListener, progressRequestListener);
        return call;

    }

    /**
     * List certificate issuers for a specified key vault.
     * The GetCertificateIssuers operation returns the set of certificate issuer resources in the specified key vault. This operation requires the certificates/manageissuers/getissuers permission.
     * @param apiVersion Client API version. (required)
     * @param maxresults Maximum number of results to return in a page. If not specified the service will return up to 25 results. (optional)
     * @return CertificateIssuerListResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CertificateIssuerListResult getCertificateIssuers(String apiVersion, Integer maxresults) throws ApiException {
        ApiResponse<CertificateIssuerListResult> resp = getCertificateIssuersWithHttpInfo(apiVersion, maxresults);
        return resp.getData();
    }

    /**
     * List certificate issuers for a specified key vault.
     * The GetCertificateIssuers operation returns the set of certificate issuer resources in the specified key vault. This operation requires the certificates/manageissuers/getissuers permission.
     * @param apiVersion Client API version. (required)
     * @param maxresults Maximum number of results to return in a page. If not specified the service will return up to 25 results. (optional)
     * @return ApiResponse&lt;CertificateIssuerListResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CertificateIssuerListResult> getCertificateIssuersWithHttpInfo(String apiVersion, Integer maxresults) throws ApiException {
        com.squareup.okhttp.Call call = getCertificateIssuersValidateBeforeCall(apiVersion, maxresults, null, null);
        Type localVarReturnType = new TypeToken<CertificateIssuerListResult>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * List certificate issuers for a specified key vault. (asynchronously)
     * The GetCertificateIssuers operation returns the set of certificate issuer resources in the specified key vault. This operation requires the certificates/manageissuers/getissuers permission.
     * @param apiVersion Client API version. (required)
     * @param maxresults Maximum number of results to return in a page. If not specified the service will return up to 25 results. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getCertificateIssuersAsync(String apiVersion, Integer maxresults, final ApiCallback<CertificateIssuerListResult> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getCertificateIssuersValidateBeforeCall(apiVersion, maxresults, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CertificateIssuerListResult>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getCertificateOperation
     * @param certificateName The name of the certificate. (required)
     * @param apiVersion Client API version. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getCertificateOperationCall(String certificateName, String apiVersion, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/certificates/{certificate-name}/pending"
            .replaceAll("\\{" + "certificate-name" + "\\}", apiClient.escapeString(certificateName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (apiVersion != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("api-version", apiVersion));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getCertificateOperationValidateBeforeCall(String certificateName, String apiVersion, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'certificateName' is set
        if (certificateName == null) {
            throw new ApiException("Missing the required parameter 'certificateName' when calling getCertificateOperation(Async)");
        }
        
        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling getCertificateOperation(Async)");
        }
        

        com.squareup.okhttp.Call call = getCertificateOperationCall(certificateName, apiVersion, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Gets the creation operation of a certificate.
     * Gets the creation operation associated with a specified certificate. This operation requires the certificates/get permission.
     * @param certificateName The name of the certificate. (required)
     * @param apiVersion Client API version. (required)
     * @return CertificateOperation
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CertificateOperation getCertificateOperation(String certificateName, String apiVersion) throws ApiException {
        ApiResponse<CertificateOperation> resp = getCertificateOperationWithHttpInfo(certificateName, apiVersion);
        return resp.getData();
    }

    /**
     * Gets the creation operation of a certificate.
     * Gets the creation operation associated with a specified certificate. This operation requires the certificates/get permission.
     * @param certificateName The name of the certificate. (required)
     * @param apiVersion Client API version. (required)
     * @return ApiResponse&lt;CertificateOperation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CertificateOperation> getCertificateOperationWithHttpInfo(String certificateName, String apiVersion) throws ApiException {
        com.squareup.okhttp.Call call = getCertificateOperationValidateBeforeCall(certificateName, apiVersion, null, null);
        Type localVarReturnType = new TypeToken<CertificateOperation>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Gets the creation operation of a certificate. (asynchronously)
     * Gets the creation operation associated with a specified certificate. This operation requires the certificates/get permission.
     * @param certificateName The name of the certificate. (required)
     * @param apiVersion Client API version. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getCertificateOperationAsync(String certificateName, String apiVersion, final ApiCallback<CertificateOperation> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getCertificateOperationValidateBeforeCall(certificateName, apiVersion, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CertificateOperation>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getCertificatePolicy
     * @param certificateName The name of the certificate in a given key vault. (required)
     * @param apiVersion Client API version. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getCertificatePolicyCall(String certificateName, String apiVersion, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/certificates/{certificate-name}/policy"
            .replaceAll("\\{" + "certificate-name" + "\\}", apiClient.escapeString(certificateName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (apiVersion != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("api-version", apiVersion));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getCertificatePolicyValidateBeforeCall(String certificateName, String apiVersion, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'certificateName' is set
        if (certificateName == null) {
            throw new ApiException("Missing the required parameter 'certificateName' when calling getCertificatePolicy(Async)");
        }
        
        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling getCertificatePolicy(Async)");
        }
        

        com.squareup.okhttp.Call call = getCertificatePolicyCall(certificateName, apiVersion, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Lists the policy for a certificate.
     * The GetCertificatePolicy operation returns the specified certificate policy resources in the specified key vault. This operation requires the certificates/get permission.
     * @param certificateName The name of the certificate in a given key vault. (required)
     * @param apiVersion Client API version. (required)
     * @return CertificatePolicy
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CertificatePolicy getCertificatePolicy(String certificateName, String apiVersion) throws ApiException {
        ApiResponse<CertificatePolicy> resp = getCertificatePolicyWithHttpInfo(certificateName, apiVersion);
        return resp.getData();
    }

    /**
     * Lists the policy for a certificate.
     * The GetCertificatePolicy operation returns the specified certificate policy resources in the specified key vault. This operation requires the certificates/get permission.
     * @param certificateName The name of the certificate in a given key vault. (required)
     * @param apiVersion Client API version. (required)
     * @return ApiResponse&lt;CertificatePolicy&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CertificatePolicy> getCertificatePolicyWithHttpInfo(String certificateName, String apiVersion) throws ApiException {
        com.squareup.okhttp.Call call = getCertificatePolicyValidateBeforeCall(certificateName, apiVersion, null, null);
        Type localVarReturnType = new TypeToken<CertificatePolicy>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Lists the policy for a certificate. (asynchronously)
     * The GetCertificatePolicy operation returns the specified certificate policy resources in the specified key vault. This operation requires the certificates/get permission.
     * @param certificateName The name of the certificate in a given key vault. (required)
     * @param apiVersion Client API version. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getCertificatePolicyAsync(String certificateName, String apiVersion, final ApiCallback<CertificatePolicy> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getCertificatePolicyValidateBeforeCall(certificateName, apiVersion, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CertificatePolicy>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getCertificateVersions
     * @param certificateName The name of the certificate. (required)
     * @param apiVersion Client API version. (required)
     * @param maxresults Maximum number of results to return in a page. If not specified the service will return up to 25 results. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getCertificateVersionsCall(String certificateName, String apiVersion, Integer maxresults, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/certificates/{certificate-name}/versions"
            .replaceAll("\\{" + "certificate-name" + "\\}", apiClient.escapeString(certificateName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (maxresults != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("maxresults", maxresults));
        if (apiVersion != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("api-version", apiVersion));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getCertificateVersionsValidateBeforeCall(String certificateName, String apiVersion, Integer maxresults, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'certificateName' is set
        if (certificateName == null) {
            throw new ApiException("Missing the required parameter 'certificateName' when calling getCertificateVersions(Async)");
        }
        
        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling getCertificateVersions(Async)");
        }
        

        com.squareup.okhttp.Call call = getCertificateVersionsCall(certificateName, apiVersion, maxresults, progressListener, progressRequestListener);
        return call;

    }

    /**
     * List the versions of a certificate.
     * The GetCertificateVersions operation returns the versions of a certificate in the specified key vault. This operation requires the certificates/list permission.
     * @param certificateName The name of the certificate. (required)
     * @param apiVersion Client API version. (required)
     * @param maxresults Maximum number of results to return in a page. If not specified the service will return up to 25 results. (optional)
     * @return CertificateListResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CertificateListResult getCertificateVersions(String certificateName, String apiVersion, Integer maxresults) throws ApiException {
        ApiResponse<CertificateListResult> resp = getCertificateVersionsWithHttpInfo(certificateName, apiVersion, maxresults);
        return resp.getData();
    }

    /**
     * List the versions of a certificate.
     * The GetCertificateVersions operation returns the versions of a certificate in the specified key vault. This operation requires the certificates/list permission.
     * @param certificateName The name of the certificate. (required)
     * @param apiVersion Client API version. (required)
     * @param maxresults Maximum number of results to return in a page. If not specified the service will return up to 25 results. (optional)
     * @return ApiResponse&lt;CertificateListResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CertificateListResult> getCertificateVersionsWithHttpInfo(String certificateName, String apiVersion, Integer maxresults) throws ApiException {
        com.squareup.okhttp.Call call = getCertificateVersionsValidateBeforeCall(certificateName, apiVersion, maxresults, null, null);
        Type localVarReturnType = new TypeToken<CertificateListResult>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * List the versions of a certificate. (asynchronously)
     * The GetCertificateVersions operation returns the versions of a certificate in the specified key vault. This operation requires the certificates/list permission.
     * @param certificateName The name of the certificate. (required)
     * @param apiVersion Client API version. (required)
     * @param maxresults Maximum number of results to return in a page. If not specified the service will return up to 25 results. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getCertificateVersionsAsync(String certificateName, String apiVersion, Integer maxresults, final ApiCallback<CertificateListResult> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getCertificateVersionsValidateBeforeCall(certificateName, apiVersion, maxresults, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CertificateListResult>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getCertificates
     * @param apiVersion Client API version. (required)
     * @param maxresults Maximum number of results to return in a page. If not specified the service will return up to 25 results. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getCertificatesCall(String apiVersion, Integer maxresults, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/certificates";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (maxresults != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("maxresults", maxresults));
        if (apiVersion != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("api-version", apiVersion));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getCertificatesValidateBeforeCall(String apiVersion, Integer maxresults, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling getCertificates(Async)");
        }
        

        com.squareup.okhttp.Call call = getCertificatesCall(apiVersion, maxresults, progressListener, progressRequestListener);
        return call;

    }

    /**
     * List certificates in a specified key vault
     * The GetCertificates operation returns the set of certificates resources in the specified key vault. This operation requires the certificates/list permission.
     * @param apiVersion Client API version. (required)
     * @param maxresults Maximum number of results to return in a page. If not specified the service will return up to 25 results. (optional)
     * @return CertificateListResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CertificateListResult getCertificates(String apiVersion, Integer maxresults) throws ApiException {
        ApiResponse<CertificateListResult> resp = getCertificatesWithHttpInfo(apiVersion, maxresults);
        return resp.getData();
    }

    /**
     * List certificates in a specified key vault
     * The GetCertificates operation returns the set of certificates resources in the specified key vault. This operation requires the certificates/list permission.
     * @param apiVersion Client API version. (required)
     * @param maxresults Maximum number of results to return in a page. If not specified the service will return up to 25 results. (optional)
     * @return ApiResponse&lt;CertificateListResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CertificateListResult> getCertificatesWithHttpInfo(String apiVersion, Integer maxresults) throws ApiException {
        com.squareup.okhttp.Call call = getCertificatesValidateBeforeCall(apiVersion, maxresults, null, null);
        Type localVarReturnType = new TypeToken<CertificateListResult>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * List certificates in a specified key vault (asynchronously)
     * The GetCertificates operation returns the set of certificates resources in the specified key vault. This operation requires the certificates/list permission.
     * @param apiVersion Client API version. (required)
     * @param maxresults Maximum number of results to return in a page. If not specified the service will return up to 25 results. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getCertificatesAsync(String apiVersion, Integer maxresults, final ApiCallback<CertificateListResult> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getCertificatesValidateBeforeCall(apiVersion, maxresults, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CertificateListResult>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for importCertificate
     * @param certificateName The name of the certificate. (required)
     * @param parameters The parameters to import the certificate. (required)
     * @param apiVersion Client API version. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call importCertificateCall(String certificateName, CertificateImportParameters parameters, String apiVersion, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = parameters;

        // create path and map variables
        String localVarPath = "/certificates/{certificate-name}/import"
            .replaceAll("\\{" + "certificate-name" + "\\}", apiClient.escapeString(certificateName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (apiVersion != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("api-version", apiVersion));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call importCertificateValidateBeforeCall(String certificateName, CertificateImportParameters parameters, String apiVersion, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'certificateName' is set
        if (certificateName == null) {
            throw new ApiException("Missing the required parameter 'certificateName' when calling importCertificate(Async)");
        }
        
        // verify the required parameter 'parameters' is set
        if (parameters == null) {
            throw new ApiException("Missing the required parameter 'parameters' when calling importCertificate(Async)");
        }
        
        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling importCertificate(Async)");
        }
        

        com.squareup.okhttp.Call call = importCertificateCall(certificateName, parameters, apiVersion, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Imports a certificate into a specified key vault.
     * Imports an existing valid certificate, containing a private key, into Azure Key Vault. The certificate to be imported can be in either PFX or PEM format. If the certificate is in PEM format the PEM file must contain the key as well as x509 certificates. This operation requires the certificates/import permission.
     * @param certificateName The name of the certificate. (required)
     * @param parameters The parameters to import the certificate. (required)
     * @param apiVersion Client API version. (required)
     * @return CertificateBundle
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CertificateBundle importCertificate(String certificateName, CertificateImportParameters parameters, String apiVersion) throws ApiException {
        ApiResponse<CertificateBundle> resp = importCertificateWithHttpInfo(certificateName, parameters, apiVersion);
        return resp.getData();
    }

    /**
     * Imports a certificate into a specified key vault.
     * Imports an existing valid certificate, containing a private key, into Azure Key Vault. The certificate to be imported can be in either PFX or PEM format. If the certificate is in PEM format the PEM file must contain the key as well as x509 certificates. This operation requires the certificates/import permission.
     * @param certificateName The name of the certificate. (required)
     * @param parameters The parameters to import the certificate. (required)
     * @param apiVersion Client API version. (required)
     * @return ApiResponse&lt;CertificateBundle&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CertificateBundle> importCertificateWithHttpInfo(String certificateName, CertificateImportParameters parameters, String apiVersion) throws ApiException {
        com.squareup.okhttp.Call call = importCertificateValidateBeforeCall(certificateName, parameters, apiVersion, null, null);
        Type localVarReturnType = new TypeToken<CertificateBundle>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Imports a certificate into a specified key vault. (asynchronously)
     * Imports an existing valid certificate, containing a private key, into Azure Key Vault. The certificate to be imported can be in either PFX or PEM format. If the certificate is in PEM format the PEM file must contain the key as well as x509 certificates. This operation requires the certificates/import permission.
     * @param certificateName The name of the certificate. (required)
     * @param parameters The parameters to import the certificate. (required)
     * @param apiVersion Client API version. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call importCertificateAsync(String certificateName, CertificateImportParameters parameters, String apiVersion, final ApiCallback<CertificateBundle> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = importCertificateValidateBeforeCall(certificateName, parameters, apiVersion, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CertificateBundle>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for mergeCertificate
     * @param certificateName The name of the certificate. (required)
     * @param parameters The parameters to merge certificate. (required)
     * @param apiVersion Client API version. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call mergeCertificateCall(String certificateName, CertificateMergeParameters parameters, String apiVersion, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = parameters;

        // create path and map variables
        String localVarPath = "/certificates/{certificate-name}/pending/merge"
            .replaceAll("\\{" + "certificate-name" + "\\}", apiClient.escapeString(certificateName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (apiVersion != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("api-version", apiVersion));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call mergeCertificateValidateBeforeCall(String certificateName, CertificateMergeParameters parameters, String apiVersion, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'certificateName' is set
        if (certificateName == null) {
            throw new ApiException("Missing the required parameter 'certificateName' when calling mergeCertificate(Async)");
        }
        
        // verify the required parameter 'parameters' is set
        if (parameters == null) {
            throw new ApiException("Missing the required parameter 'parameters' when calling mergeCertificate(Async)");
        }
        
        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling mergeCertificate(Async)");
        }
        

        com.squareup.okhttp.Call call = mergeCertificateCall(certificateName, parameters, apiVersion, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Merges a certificate or a certificate chain with a key pair existing on the server.
     * The MergeCertificate operation performs the merging of a certificate or certificate chain with a key pair currently available in the service. This operation requires the certificates/create permission.
     * @param certificateName The name of the certificate. (required)
     * @param parameters The parameters to merge certificate. (required)
     * @param apiVersion Client API version. (required)
     * @return CertificateBundle
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CertificateBundle mergeCertificate(String certificateName, CertificateMergeParameters parameters, String apiVersion) throws ApiException {
        ApiResponse<CertificateBundle> resp = mergeCertificateWithHttpInfo(certificateName, parameters, apiVersion);
        return resp.getData();
    }

    /**
     * Merges a certificate or a certificate chain with a key pair existing on the server.
     * The MergeCertificate operation performs the merging of a certificate or certificate chain with a key pair currently available in the service. This operation requires the certificates/create permission.
     * @param certificateName The name of the certificate. (required)
     * @param parameters The parameters to merge certificate. (required)
     * @param apiVersion Client API version. (required)
     * @return ApiResponse&lt;CertificateBundle&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CertificateBundle> mergeCertificateWithHttpInfo(String certificateName, CertificateMergeParameters parameters, String apiVersion) throws ApiException {
        com.squareup.okhttp.Call call = mergeCertificateValidateBeforeCall(certificateName, parameters, apiVersion, null, null);
        Type localVarReturnType = new TypeToken<CertificateBundle>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Merges a certificate or a certificate chain with a key pair existing on the server. (asynchronously)
     * The MergeCertificate operation performs the merging of a certificate or certificate chain with a key pair currently available in the service. This operation requires the certificates/create permission.
     * @param certificateName The name of the certificate. (required)
     * @param parameters The parameters to merge certificate. (required)
     * @param apiVersion Client API version. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call mergeCertificateAsync(String certificateName, CertificateMergeParameters parameters, String apiVersion, final ApiCallback<CertificateBundle> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = mergeCertificateValidateBeforeCall(certificateName, parameters, apiVersion, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CertificateBundle>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for setCertificateContacts
     * @param contacts The contacts for the key vault certificate. (required)
     * @param apiVersion Client API version. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call setCertificateContactsCall(Contacts contacts, String apiVersion, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = contacts;

        // create path and map variables
        String localVarPath = "/certificates/contacts";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (apiVersion != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("api-version", apiVersion));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call setCertificateContactsValidateBeforeCall(Contacts contacts, String apiVersion, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'contacts' is set
        if (contacts == null) {
            throw new ApiException("Missing the required parameter 'contacts' when calling setCertificateContacts(Async)");
        }
        
        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling setCertificateContacts(Async)");
        }
        

        com.squareup.okhttp.Call call = setCertificateContactsCall(contacts, apiVersion, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Sets the certificate contacts for the specified key vault.
     * Sets the certificate contacts for the specified key vault. This operation requires the certificates/managecontacts permission.
     * @param contacts The contacts for the key vault certificate. (required)
     * @param apiVersion Client API version. (required)
     * @return Contacts
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Contacts setCertificateContacts(Contacts contacts, String apiVersion) throws ApiException {
        ApiResponse<Contacts> resp = setCertificateContactsWithHttpInfo(contacts, apiVersion);
        return resp.getData();
    }

    /**
     * Sets the certificate contacts for the specified key vault.
     * Sets the certificate contacts for the specified key vault. This operation requires the certificates/managecontacts permission.
     * @param contacts The contacts for the key vault certificate. (required)
     * @param apiVersion Client API version. (required)
     * @return ApiResponse&lt;Contacts&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Contacts> setCertificateContactsWithHttpInfo(Contacts contacts, String apiVersion) throws ApiException {
        com.squareup.okhttp.Call call = setCertificateContactsValidateBeforeCall(contacts, apiVersion, null, null);
        Type localVarReturnType = new TypeToken<Contacts>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Sets the certificate contacts for the specified key vault. (asynchronously)
     * Sets the certificate contacts for the specified key vault. This operation requires the certificates/managecontacts permission.
     * @param contacts The contacts for the key vault certificate. (required)
     * @param apiVersion Client API version. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call setCertificateContactsAsync(Contacts contacts, String apiVersion, final ApiCallback<Contacts> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = setCertificateContactsValidateBeforeCall(contacts, apiVersion, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Contacts>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for setCertificateIssuer
     * @param issuerName The name of the issuer. (required)
     * @param parameter Certificate issuer set parameter. (required)
     * @param apiVersion Client API version. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call setCertificateIssuerCall(String issuerName, CertificateIssuerSetParameters parameter, String apiVersion, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = parameter;

        // create path and map variables
        String localVarPath = "/certificates/issuers/{issuer-name}"
            .replaceAll("\\{" + "issuer-name" + "\\}", apiClient.escapeString(issuerName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (apiVersion != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("api-version", apiVersion));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call setCertificateIssuerValidateBeforeCall(String issuerName, CertificateIssuerSetParameters parameter, String apiVersion, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'issuerName' is set
        if (issuerName == null) {
            throw new ApiException("Missing the required parameter 'issuerName' when calling setCertificateIssuer(Async)");
        }
        
        // verify the required parameter 'parameter' is set
        if (parameter == null) {
            throw new ApiException("Missing the required parameter 'parameter' when calling setCertificateIssuer(Async)");
        }
        
        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling setCertificateIssuer(Async)");
        }
        

        com.squareup.okhttp.Call call = setCertificateIssuerCall(issuerName, parameter, apiVersion, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Sets the specified certificate issuer.
     * The SetCertificateIssuer operation adds or updates the specified certificate issuer. This operation requires the certificates/setissuers permission.
     * @param issuerName The name of the issuer. (required)
     * @param parameter Certificate issuer set parameter. (required)
     * @param apiVersion Client API version. (required)
     * @return IssuerBundle
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public IssuerBundle setCertificateIssuer(String issuerName, CertificateIssuerSetParameters parameter, String apiVersion) throws ApiException {
        ApiResponse<IssuerBundle> resp = setCertificateIssuerWithHttpInfo(issuerName, parameter, apiVersion);
        return resp.getData();
    }

    /**
     * Sets the specified certificate issuer.
     * The SetCertificateIssuer operation adds or updates the specified certificate issuer. This operation requires the certificates/setissuers permission.
     * @param issuerName The name of the issuer. (required)
     * @param parameter Certificate issuer set parameter. (required)
     * @param apiVersion Client API version. (required)
     * @return ApiResponse&lt;IssuerBundle&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<IssuerBundle> setCertificateIssuerWithHttpInfo(String issuerName, CertificateIssuerSetParameters parameter, String apiVersion) throws ApiException {
        com.squareup.okhttp.Call call = setCertificateIssuerValidateBeforeCall(issuerName, parameter, apiVersion, null, null);
        Type localVarReturnType = new TypeToken<IssuerBundle>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Sets the specified certificate issuer. (asynchronously)
     * The SetCertificateIssuer operation adds or updates the specified certificate issuer. This operation requires the certificates/setissuers permission.
     * @param issuerName The name of the issuer. (required)
     * @param parameter Certificate issuer set parameter. (required)
     * @param apiVersion Client API version. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call setCertificateIssuerAsync(String issuerName, CertificateIssuerSetParameters parameter, String apiVersion, final ApiCallback<IssuerBundle> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = setCertificateIssuerValidateBeforeCall(issuerName, parameter, apiVersion, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<IssuerBundle>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updateCertificate
     * @param certificateName The name of the certificate in the given key vault. (required)
     * @param certificateVersion The version of the certificate. (required)
     * @param parameters The parameters for certificate update. (required)
     * @param apiVersion Client API version. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateCertificateCall(String certificateName, String certificateVersion, CertificateUpdateParameters parameters, String apiVersion, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = parameters;

        // create path and map variables
        String localVarPath = "/certificates/{certificate-name}/{certificate-version}"
            .replaceAll("\\{" + "certificate-name" + "\\}", apiClient.escapeString(certificateName.toString()))
            .replaceAll("\\{" + "certificate-version" + "\\}", apiClient.escapeString(certificateVersion.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (apiVersion != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("api-version", apiVersion));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateCertificateValidateBeforeCall(String certificateName, String certificateVersion, CertificateUpdateParameters parameters, String apiVersion, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'certificateName' is set
        if (certificateName == null) {
            throw new ApiException("Missing the required parameter 'certificateName' when calling updateCertificate(Async)");
        }
        
        // verify the required parameter 'certificateVersion' is set
        if (certificateVersion == null) {
            throw new ApiException("Missing the required parameter 'certificateVersion' when calling updateCertificate(Async)");
        }
        
        // verify the required parameter 'parameters' is set
        if (parameters == null) {
            throw new ApiException("Missing the required parameter 'parameters' when calling updateCertificate(Async)");
        }
        
        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling updateCertificate(Async)");
        }
        

        com.squareup.okhttp.Call call = updateCertificateCall(certificateName, certificateVersion, parameters, apiVersion, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Updates the specified attributes associated with the given certificate.
     * The UpdateCertificate operation applies the specified update on the given certificate; the only elements updated are the certificate&#39;s attributes. This operation requires the certificates/update permission.
     * @param certificateName The name of the certificate in the given key vault. (required)
     * @param certificateVersion The version of the certificate. (required)
     * @param parameters The parameters for certificate update. (required)
     * @param apiVersion Client API version. (required)
     * @return CertificateBundle
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CertificateBundle updateCertificate(String certificateName, String certificateVersion, CertificateUpdateParameters parameters, String apiVersion) throws ApiException {
        ApiResponse<CertificateBundle> resp = updateCertificateWithHttpInfo(certificateName, certificateVersion, parameters, apiVersion);
        return resp.getData();
    }

    /**
     * Updates the specified attributes associated with the given certificate.
     * The UpdateCertificate operation applies the specified update on the given certificate; the only elements updated are the certificate&#39;s attributes. This operation requires the certificates/update permission.
     * @param certificateName The name of the certificate in the given key vault. (required)
     * @param certificateVersion The version of the certificate. (required)
     * @param parameters The parameters for certificate update. (required)
     * @param apiVersion Client API version. (required)
     * @return ApiResponse&lt;CertificateBundle&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CertificateBundle> updateCertificateWithHttpInfo(String certificateName, String certificateVersion, CertificateUpdateParameters parameters, String apiVersion) throws ApiException {
        com.squareup.okhttp.Call call = updateCertificateValidateBeforeCall(certificateName, certificateVersion, parameters, apiVersion, null, null);
        Type localVarReturnType = new TypeToken<CertificateBundle>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Updates the specified attributes associated with the given certificate. (asynchronously)
     * The UpdateCertificate operation applies the specified update on the given certificate; the only elements updated are the certificate&#39;s attributes. This operation requires the certificates/update permission.
     * @param certificateName The name of the certificate in the given key vault. (required)
     * @param certificateVersion The version of the certificate. (required)
     * @param parameters The parameters for certificate update. (required)
     * @param apiVersion Client API version. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateCertificateAsync(String certificateName, String certificateVersion, CertificateUpdateParameters parameters, String apiVersion, final ApiCallback<CertificateBundle> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateCertificateValidateBeforeCall(certificateName, certificateVersion, parameters, apiVersion, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CertificateBundle>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updateCertificateIssuer
     * @param issuerName The name of the issuer. (required)
     * @param parameter Certificate issuer update parameter. (required)
     * @param apiVersion Client API version. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateCertificateIssuerCall(String issuerName, CertificateIssuerUpdateParameters parameter, String apiVersion, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = parameter;

        // create path and map variables
        String localVarPath = "/certificates/issuers/{issuer-name}"
            .replaceAll("\\{" + "issuer-name" + "\\}", apiClient.escapeString(issuerName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (apiVersion != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("api-version", apiVersion));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateCertificateIssuerValidateBeforeCall(String issuerName, CertificateIssuerUpdateParameters parameter, String apiVersion, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'issuerName' is set
        if (issuerName == null) {
            throw new ApiException("Missing the required parameter 'issuerName' when calling updateCertificateIssuer(Async)");
        }
        
        // verify the required parameter 'parameter' is set
        if (parameter == null) {
            throw new ApiException("Missing the required parameter 'parameter' when calling updateCertificateIssuer(Async)");
        }
        
        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling updateCertificateIssuer(Async)");
        }
        

        com.squareup.okhttp.Call call = updateCertificateIssuerCall(issuerName, parameter, apiVersion, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Updates the specified certificate issuer.
     * The UpdateCertificateIssuer operation performs an update on the specified certificate issuer entity. This operation requires the certificates/setissuers permission.
     * @param issuerName The name of the issuer. (required)
     * @param parameter Certificate issuer update parameter. (required)
     * @param apiVersion Client API version. (required)
     * @return IssuerBundle
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public IssuerBundle updateCertificateIssuer(String issuerName, CertificateIssuerUpdateParameters parameter, String apiVersion) throws ApiException {
        ApiResponse<IssuerBundle> resp = updateCertificateIssuerWithHttpInfo(issuerName, parameter, apiVersion);
        return resp.getData();
    }

    /**
     * Updates the specified certificate issuer.
     * The UpdateCertificateIssuer operation performs an update on the specified certificate issuer entity. This operation requires the certificates/setissuers permission.
     * @param issuerName The name of the issuer. (required)
     * @param parameter Certificate issuer update parameter. (required)
     * @param apiVersion Client API version. (required)
     * @return ApiResponse&lt;IssuerBundle&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<IssuerBundle> updateCertificateIssuerWithHttpInfo(String issuerName, CertificateIssuerUpdateParameters parameter, String apiVersion) throws ApiException {
        com.squareup.okhttp.Call call = updateCertificateIssuerValidateBeforeCall(issuerName, parameter, apiVersion, null, null);
        Type localVarReturnType = new TypeToken<IssuerBundle>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Updates the specified certificate issuer. (asynchronously)
     * The UpdateCertificateIssuer operation performs an update on the specified certificate issuer entity. This operation requires the certificates/setissuers permission.
     * @param issuerName The name of the issuer. (required)
     * @param parameter Certificate issuer update parameter. (required)
     * @param apiVersion Client API version. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateCertificateIssuerAsync(String issuerName, CertificateIssuerUpdateParameters parameter, String apiVersion, final ApiCallback<IssuerBundle> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateCertificateIssuerValidateBeforeCall(issuerName, parameter, apiVersion, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<IssuerBundle>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updateCertificateOperation
     * @param certificateName The name of the certificate. (required)
     * @param certificateOperation The certificate operation response. (required)
     * @param apiVersion Client API version. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateCertificateOperationCall(String certificateName, CertificateOperationUpdateParameter certificateOperation, String apiVersion, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = certificateOperation;

        // create path and map variables
        String localVarPath = "/certificates/{certificate-name}/pending"
            .replaceAll("\\{" + "certificate-name" + "\\}", apiClient.escapeString(certificateName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (apiVersion != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("api-version", apiVersion));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateCertificateOperationValidateBeforeCall(String certificateName, CertificateOperationUpdateParameter certificateOperation, String apiVersion, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'certificateName' is set
        if (certificateName == null) {
            throw new ApiException("Missing the required parameter 'certificateName' when calling updateCertificateOperation(Async)");
        }
        
        // verify the required parameter 'certificateOperation' is set
        if (certificateOperation == null) {
            throw new ApiException("Missing the required parameter 'certificateOperation' when calling updateCertificateOperation(Async)");
        }
        
        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling updateCertificateOperation(Async)");
        }
        

        com.squareup.okhttp.Call call = updateCertificateOperationCall(certificateName, certificateOperation, apiVersion, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Updates a certificate operation.
     * Updates a certificate creation operation that is already in progress. This operation requires the certificates/update permission.
     * @param certificateName The name of the certificate. (required)
     * @param certificateOperation The certificate operation response. (required)
     * @param apiVersion Client API version. (required)
     * @return CertificateOperation
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CertificateOperation updateCertificateOperation(String certificateName, CertificateOperationUpdateParameter certificateOperation, String apiVersion) throws ApiException {
        ApiResponse<CertificateOperation> resp = updateCertificateOperationWithHttpInfo(certificateName, certificateOperation, apiVersion);
        return resp.getData();
    }

    /**
     * Updates a certificate operation.
     * Updates a certificate creation operation that is already in progress. This operation requires the certificates/update permission.
     * @param certificateName The name of the certificate. (required)
     * @param certificateOperation The certificate operation response. (required)
     * @param apiVersion Client API version. (required)
     * @return ApiResponse&lt;CertificateOperation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CertificateOperation> updateCertificateOperationWithHttpInfo(String certificateName, CertificateOperationUpdateParameter certificateOperation, String apiVersion) throws ApiException {
        com.squareup.okhttp.Call call = updateCertificateOperationValidateBeforeCall(certificateName, certificateOperation, apiVersion, null, null);
        Type localVarReturnType = new TypeToken<CertificateOperation>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Updates a certificate operation. (asynchronously)
     * Updates a certificate creation operation that is already in progress. This operation requires the certificates/update permission.
     * @param certificateName The name of the certificate. (required)
     * @param certificateOperation The certificate operation response. (required)
     * @param apiVersion Client API version. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateCertificateOperationAsync(String certificateName, CertificateOperationUpdateParameter certificateOperation, String apiVersion, final ApiCallback<CertificateOperation> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateCertificateOperationValidateBeforeCall(certificateName, certificateOperation, apiVersion, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CertificateOperation>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updateCertificatePolicy
     * @param certificateName The name of the certificate in the given vault. (required)
     * @param certificatePolicy The policy for the certificate. (required)
     * @param apiVersion Client API version. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateCertificatePolicyCall(String certificateName, CertificatePolicy certificatePolicy, String apiVersion, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = certificatePolicy;

        // create path and map variables
        String localVarPath = "/certificates/{certificate-name}/policy"
            .replaceAll("\\{" + "certificate-name" + "\\}", apiClient.escapeString(certificateName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (apiVersion != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("api-version", apiVersion));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateCertificatePolicyValidateBeforeCall(String certificateName, CertificatePolicy certificatePolicy, String apiVersion, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'certificateName' is set
        if (certificateName == null) {
            throw new ApiException("Missing the required parameter 'certificateName' when calling updateCertificatePolicy(Async)");
        }
        
        // verify the required parameter 'certificatePolicy' is set
        if (certificatePolicy == null) {
            throw new ApiException("Missing the required parameter 'certificatePolicy' when calling updateCertificatePolicy(Async)");
        }
        
        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling updateCertificatePolicy(Async)");
        }
        

        com.squareup.okhttp.Call call = updateCertificatePolicyCall(certificateName, certificatePolicy, apiVersion, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Updates the policy for a certificate.
     * Set specified members in the certificate policy. Leave others as null. This operation requires the certificates/update permission.
     * @param certificateName The name of the certificate in the given vault. (required)
     * @param certificatePolicy The policy for the certificate. (required)
     * @param apiVersion Client API version. (required)
     * @return CertificatePolicy
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CertificatePolicy updateCertificatePolicy(String certificateName, CertificatePolicy certificatePolicy, String apiVersion) throws ApiException {
        ApiResponse<CertificatePolicy> resp = updateCertificatePolicyWithHttpInfo(certificateName, certificatePolicy, apiVersion);
        return resp.getData();
    }

    /**
     * Updates the policy for a certificate.
     * Set specified members in the certificate policy. Leave others as null. This operation requires the certificates/update permission.
     * @param certificateName The name of the certificate in the given vault. (required)
     * @param certificatePolicy The policy for the certificate. (required)
     * @param apiVersion Client API version. (required)
     * @return ApiResponse&lt;CertificatePolicy&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CertificatePolicy> updateCertificatePolicyWithHttpInfo(String certificateName, CertificatePolicy certificatePolicy, String apiVersion) throws ApiException {
        com.squareup.okhttp.Call call = updateCertificatePolicyValidateBeforeCall(certificateName, certificatePolicy, apiVersion, null, null);
        Type localVarReturnType = new TypeToken<CertificatePolicy>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Updates the policy for a certificate. (asynchronously)
     * Set specified members in the certificate policy. Leave others as null. This operation requires the certificates/update permission.
     * @param certificateName The name of the certificate in the given vault. (required)
     * @param certificatePolicy The policy for the certificate. (required)
     * @param apiVersion Client API version. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateCertificatePolicyAsync(String certificateName, CertificatePolicy certificatePolicy, String apiVersion, final ApiCallback<CertificatePolicy> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateCertificatePolicyValidateBeforeCall(certificateName, certificatePolicy, apiVersion, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CertificatePolicy>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
