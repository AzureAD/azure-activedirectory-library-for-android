/*
 * KeyVaultClient
 * The key vault client performs cryptographic key operations and vault operations against the Key Vault service.
 *
 * OpenAPI spec version: 2016-10-01
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.microsoft.identity.internal.test.keyvault.model;

import java.util.Objects;

import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;

import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

/**
 * Properties of the X509 component of a certificate.
 */
@ApiModel(description = "Properties of the X509 component of a certificate.")

public class X509CertificateProperties {
  @SerializedName("subject")
  private String subject = null;

  @SerializedName("ekus")
  private List<String> ekus = null;

  @SerializedName("sans")
  private SubjectAlternativeNames sans = null;

  /**
   * Gets or Sets keyUsage
   */
  @JsonAdapter(KeyUsageEnum.Adapter.class)
  public enum KeyUsageEnum {
    DIGITALSIGNATURE("digitalSignature"),
    
    NONREPUDIATION("nonRepudiation"),
    
    KEYENCIPHERMENT("keyEncipherment"),
    
    DATAENCIPHERMENT("dataEncipherment"),
    
    KEYAGREEMENT("keyAgreement"),
    
    KEYCERTSIGN("keyCertSign"),
    
    CRLSIGN("cRLSign"),
    
    ENCIPHERONLY("encipherOnly"),
    
    DECIPHERONLY("decipherOnly");

    private String value;

    KeyUsageEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static KeyUsageEnum fromValue(String text) {
      for (KeyUsageEnum b : KeyUsageEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<KeyUsageEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final KeyUsageEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public KeyUsageEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return KeyUsageEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("key_usage")
  private List<KeyUsageEnum> keyUsage = null;

  @SerializedName("validity_months")
  private Integer validityMonths = null;

  public X509CertificateProperties subject(String subject) {
    this.subject = subject;
    return this;
  }

   /**
   * The subject name. Should be a valid X509 distinguished Name.
   * @return subject
  **/
  @ApiModelProperty(value = "The subject name. Should be a valid X509 distinguished Name.")
  public String getSubject() {
    return subject;
  }

  public void setSubject(String subject) {
    this.subject = subject;
  }

  public X509CertificateProperties ekus(List<String> ekus) {
    this.ekus = ekus;
    return this;
  }

  public X509CertificateProperties addEkusItem(String ekusItem) {
    if (this.ekus == null) {
      this.ekus = new ArrayList<String>();
    }
    this.ekus.add(ekusItem);
    return this;
  }

   /**
   * The enhanced key usage.
   * @return ekus
  **/
  @ApiModelProperty(value = "The enhanced key usage.")
  public List<String> getEkus() {
    return ekus;
  }

  public void setEkus(List<String> ekus) {
    this.ekus = ekus;
  }

  public X509CertificateProperties sans(SubjectAlternativeNames sans) {
    this.sans = sans;
    return this;
  }

   /**
   * The subject alternative names.
   * @return sans
  **/
  @ApiModelProperty(value = "The subject alternative names.")
  public SubjectAlternativeNames getSans() {
    return sans;
  }

  public void setSans(SubjectAlternativeNames sans) {
    this.sans = sans;
  }

  public X509CertificateProperties keyUsage(List<KeyUsageEnum> keyUsage) {
    this.keyUsage = keyUsage;
    return this;
  }

  public X509CertificateProperties addKeyUsageItem(KeyUsageEnum keyUsageItem) {
    if (this.keyUsage == null) {
      this.keyUsage = new ArrayList<KeyUsageEnum>();
    }
    this.keyUsage.add(keyUsageItem);
    return this;
  }

   /**
   * List of key usages.
   * @return keyUsage
  **/
  @ApiModelProperty(value = "List of key usages.")
  public List<KeyUsageEnum> getKeyUsage() {
    return keyUsage;
  }

  public void setKeyUsage(List<KeyUsageEnum> keyUsage) {
    this.keyUsage = keyUsage;
  }

  public X509CertificateProperties validityMonths(Integer validityMonths) {
    this.validityMonths = validityMonths;
    return this;
  }

   /**
   * The duration that the ceritifcate is valid in months.
   * minimum: 0
   * @return validityMonths
  **/
  @ApiModelProperty(value = "The duration that the ceritifcate is valid in months.")
  public Integer getValidityMonths() {
    return validityMonths;
  }

  public void setValidityMonths(Integer validityMonths) {
    this.validityMonths = validityMonths;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    X509CertificateProperties x509CertificateProperties = (X509CertificateProperties) o;
    return Objects.equals(this.subject, x509CertificateProperties.subject) &&
        Objects.equals(this.ekus, x509CertificateProperties.ekus) &&
        Objects.equals(this.sans, x509CertificateProperties.sans) &&
        Objects.equals(this.keyUsage, x509CertificateProperties.keyUsage) &&
        Objects.equals(this.validityMonths, x509CertificateProperties.validityMonths);
  }

  @Override
  public int hashCode() {
    return Objects.hash(subject, ekus, sans, keyUsage, validityMonths);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class X509CertificateProperties {\n");
    
    sb.append("    subject: ").append(toIndentedString(subject)).append("\n");
    sb.append("    ekus: ").append(toIndentedString(ekus)).append("\n");
    sb.append("    sans: ").append(toIndentedString(sans)).append("\n");
    sb.append("    keyUsage: ").append(toIndentedString(keyUsage)).append("\n");
    sb.append("    validityMonths: ").append(toIndentedString(validityMonths)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

