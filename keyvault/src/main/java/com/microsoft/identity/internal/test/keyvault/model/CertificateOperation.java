/*
 * KeyVaultClient
 * The key vault client performs cryptographic key operations and vault operations against the Key Vault service.
 *
 * OpenAPI spec version: 2016-10-01
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.microsoft.identity.internal.test.keyvault.model;

import java.util.Objects;
import java.util.Arrays;

import com.google.gson.annotations.SerializedName;

import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;

/**
 * A certificate operation is returned in case of asynchronous requests.
 */
@ApiModel(description = "A certificate operation is returned in case of asynchronous requests.")

public class CertificateOperation {
  @SerializedName("id")
  private String id = null;

  @SerializedName("issuer")
  private IssuerParameters issuer = null;

  @SerializedName("csr")
  private byte[] csr = null;

  @SerializedName("cancellation_requested")
  private Boolean cancellationRequested = null;

  @SerializedName("status")
  private String status = null;

  @SerializedName("status_details")
  private String statusDetails = null;

  @SerializedName("error")
  private Error error = null;

  @SerializedName("target")
  private String target = null;

  @SerializedName("request_id")
  private String requestId = null;

   /**
   * The certificate id.
   * @return id
  **/
  @ApiModelProperty(value = "The certificate id.")
  public String getId() {
    return id;
  }

  public CertificateOperation issuer(IssuerParameters issuer) {
    this.issuer = issuer;
    return this;
  }

   /**
   * Parameters for the issuer of the X509 component of a certificate.
   * @return issuer
  **/
  @ApiModelProperty(value = "Parameters for the issuer of the X509 component of a certificate.")
  public IssuerParameters getIssuer() {
    return issuer;
  }

  public void setIssuer(IssuerParameters issuer) {
    this.issuer = issuer;
  }

  public CertificateOperation csr(byte[] csr) {
    this.csr = csr;
    return this;
  }

   /**
   * The certificate signing request (CSR) that is being used in the certificate operation.
   * @return csr
  **/
  @ApiModelProperty(value = "The certificate signing request (CSR) that is being used in the certificate operation.")
  public byte[] getCsr() {
    return csr;
  }

  public void setCsr(byte[] csr) {
    this.csr = csr;
  }

  public CertificateOperation cancellationRequested(Boolean cancellationRequested) {
    this.cancellationRequested = cancellationRequested;
    return this;
  }

   /**
   * Indicates if cancellation was requested on the certificate operation.
   * @return cancellationRequested
  **/
  @ApiModelProperty(value = "Indicates if cancellation was requested on the certificate operation.")
  public Boolean isCancellationRequested() {
    return cancellationRequested;
  }

  public void setCancellationRequested(Boolean cancellationRequested) {
    this.cancellationRequested = cancellationRequested;
  }

  public CertificateOperation status(String status) {
    this.status = status;
    return this;
  }

   /**
   * Status of the certificate operation.
   * @return status
  **/
  @ApiModelProperty(value = "Status of the certificate operation.")
  public String getStatus() {
    return status;
  }

  public void setStatus(String status) {
    this.status = status;
  }

  public CertificateOperation statusDetails(String statusDetails) {
    this.statusDetails = statusDetails;
    return this;
  }

   /**
   * The status details of the certificate operation.
   * @return statusDetails
  **/
  @ApiModelProperty(value = "The status details of the certificate operation.")
  public String getStatusDetails() {
    return statusDetails;
  }

  public void setStatusDetails(String statusDetails) {
    this.statusDetails = statusDetails;
  }

  public CertificateOperation error(Error error) {
    this.error = error;
    return this;
  }

   /**
   * Error encountered, if any, during the certificate operation.
   * @return error
  **/
  @ApiModelProperty(value = "Error encountered, if any, during the certificate operation.")
  public Error getError() {
    return error;
  }

  public void setError(Error error) {
    this.error = error;
  }

  public CertificateOperation target(String target) {
    this.target = target;
    return this;
  }

   /**
   * Location which contains the result of the certificate operation.
   * @return target
  **/
  @ApiModelProperty(value = "Location which contains the result of the certificate operation.")
  public String getTarget() {
    return target;
  }

  public void setTarget(String target) {
    this.target = target;
  }

  public CertificateOperation requestId(String requestId) {
    this.requestId = requestId;
    return this;
  }

   /**
   * Identifier for the certificate operation.
   * @return requestId
  **/
  @ApiModelProperty(value = "Identifier for the certificate operation.")
  public String getRequestId() {
    return requestId;
  }

  public void setRequestId(String requestId) {
    this.requestId = requestId;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CertificateOperation certificateOperation = (CertificateOperation) o;
    return Objects.equals(this.id, certificateOperation.id) &&
        Objects.equals(this.issuer, certificateOperation.issuer) &&
        Arrays.equals(this.csr, certificateOperation.csr) &&
        Objects.equals(this.cancellationRequested, certificateOperation.cancellationRequested) &&
        Objects.equals(this.status, certificateOperation.status) &&
        Objects.equals(this.statusDetails, certificateOperation.statusDetails) &&
        Objects.equals(this.error, certificateOperation.error) &&
        Objects.equals(this.target, certificateOperation.target) &&
        Objects.equals(this.requestId, certificateOperation.requestId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, issuer, Arrays.hashCode(csr), cancellationRequested, status, statusDetails, error, target, requestId);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CertificateOperation {\n");
    
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    issuer: ").append(toIndentedString(issuer)).append("\n");
    sb.append("    csr: ").append(toIndentedString(csr)).append("\n");
    sb.append("    cancellationRequested: ").append(toIndentedString(cancellationRequested)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    statusDetails: ").append(toIndentedString(statusDetails)).append("\n");
    sb.append("    error: ").append(toIndentedString(error)).append("\n");
    sb.append("    target: ").append(toIndentedString(target)).append("\n");
    sb.append("    requestId: ").append(toIndentedString(requestId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

