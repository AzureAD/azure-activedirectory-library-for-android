/*
 * KeyVaultClient
 * The key vault client performs cryptographic key operations and vault operations against the Key Vault service.
 *
 * OpenAPI spec version: 2016-10-01
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.microsoft.identity.internal.test.keyvault.model;

import java.util.Objects;

import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

/**
 * The key operations parameters.
 */
@ApiModel(description = "The key operations parameters.")

public class KeySignParameters {
  /**
   * The signing/verification algorithm identifier. For more information on possible algorithm types, see JsonWebKeySignatureAlgorithm.
   */
  @JsonAdapter(AlgEnum.Adapter.class)
  public enum AlgEnum {
    PS256("PS256"),
    
    PS384("PS384"),
    
    PS512("PS512"),
    
    RS256("RS256"),
    
    RS384("RS384"),
    
    RS512("RS512"),
    
    RSNULL("RSNULL"),
    
    ES256("ES256"),
    
    ES384("ES384"),
    
    ES512("ES512"),
    
    ECDSA256("ECDSA256");

    private String value;

    AlgEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static AlgEnum fromValue(String text) {
      for (AlgEnum b : AlgEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<AlgEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final AlgEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public AlgEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return AlgEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("alg")
  private AlgEnum alg = null;

  @SerializedName("value")
  private String value = null;

  public KeySignParameters alg(AlgEnum alg) {
    this.alg = alg;
    return this;
  }

   /**
   * The signing/verification algorithm identifier. For more information on possible algorithm types, see JsonWebKeySignatureAlgorithm.
   * @return alg
  **/
  @ApiModelProperty(required = true, value = "The signing/verification algorithm identifier. For more information on possible algorithm types, see JsonWebKeySignatureAlgorithm.")
  public AlgEnum getAlg() {
    return alg;
  }

  public void setAlg(AlgEnum alg) {
    this.alg = alg;
  }

  public KeySignParameters value(String value) {
    this.value = value;
    return this;
  }

   /**
   * Get value
   * @return value
  **/
  @ApiModelProperty(required = true, value = "")
  public String getValue() {
    return value;
  }

  public void setValue(String value) {
    this.value = value;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    KeySignParameters keySignParameters = (KeySignParameters) o;
    return Objects.equals(this.alg, keySignParameters.alg) &&
        Objects.equals(this.value, keySignParameters.value);
  }

  @Override
  public int hashCode() {
    return Objects.hash(alg, value);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class KeySignParameters {\n");
    
    sb.append("    alg: ").append(toIndentedString(alg)).append("\n");
    sb.append("    value: ").append(toIndentedString(value)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

