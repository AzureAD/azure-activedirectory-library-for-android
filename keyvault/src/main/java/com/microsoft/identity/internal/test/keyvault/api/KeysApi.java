/*
 * KeyVaultClient
 * The key vault client performs cryptographic key operations and vault operations against the Key Vault service.
 *
 * OpenAPI spec version: 2016-10-01
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.microsoft.identity.internal.test.keyvault.api;

import com.microsoft.identity.internal.test.keyvault.ApiCallback;
import com.microsoft.identity.internal.test.keyvault.ApiClient;
import com.microsoft.identity.internal.test.keyvault.ApiException;
import com.microsoft.identity.internal.test.keyvault.ApiResponse;
import com.microsoft.identity.internal.test.keyvault.Configuration;
import com.microsoft.identity.internal.test.keyvault.Pair;
import com.microsoft.identity.internal.test.keyvault.ProgressRequestBody;
import com.microsoft.identity.internal.test.keyvault.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;
import com.microsoft.identity.internal.test.keyvault.model.DeletedKeyBundle;
import com.microsoft.identity.internal.test.keyvault.model.KeyBundle;
import com.microsoft.identity.internal.test.keyvault.model.KeyCreateParameters;
import com.microsoft.identity.internal.test.keyvault.model.KeyImportParameters;
import com.microsoft.identity.internal.test.keyvault.model.KeyListResult;
import com.microsoft.identity.internal.test.keyvault.model.KeyOperationsParameters;
import com.microsoft.identity.internal.test.keyvault.model.KeySignParameters;
import com.microsoft.identity.internal.test.keyvault.model.KeyVerifyResult;

import java.io.IOException;


import com.microsoft.identity.internal.test.keyvault.model.BackupKeyResult;
import com.microsoft.identity.internal.test.keyvault.model.KeyOperationResult;
import com.microsoft.identity.internal.test.keyvault.model.KeyRestoreParameters;
import com.microsoft.identity.internal.test.keyvault.model.KeyUpdateParameters;
import com.microsoft.identity.internal.test.keyvault.model.KeyVerifyParameters;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class KeysApi {
    private ApiClient apiClient;

    public KeysApi() {
        this(Configuration.getDefaultApiClient());
    }

    public KeysApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for backupKey
     * @param keyName The name of the key. (required)
     * @param apiVersion Client API version. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call backupKeyCall(String keyName, String apiVersion, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/keys/{key-name}/backup"
            .replaceAll("\\{" + "key-name" + "\\}", apiClient.escapeString(keyName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (apiVersion != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("api-version", apiVersion));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call backupKeyValidateBeforeCall(String keyName, String apiVersion, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'keyName' is set
        if (keyName == null) {
            throw new ApiException("Missing the required parameter 'keyName' when calling backupKey(Async)");
        }
        
        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling backupKey(Async)");
        }
        

        com.squareup.okhttp.Call call = backupKeyCall(keyName, apiVersion, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Requests that a backup of the specified key be downloaded to the client.
     * The Key Backup operation exports a key from Azure Key Vault in a protected form. Note that this operation does NOT return key material in a form that can be used outside the Azure Key Vault system, the returned key material is either protected to a Azure Key Vault HSM or to Azure Key Vault itself. The intent of this operation is to allow a client to GENERATE a key in one Azure Key Vault instance, BACKUP the key, and then RESTORE it into another Azure Key Vault instance. The BACKUP operation may be used to export, in protected form, any key type from Azure Key Vault. Individual versions of a key cannot be backed up. BACKUP / RESTORE can be performed within geographical boundaries only; meaning that a BACKUP from one geographical area cannot be restored to another geographical area. For example, a backup from the US geographical area cannot be restored in an EU geographical area. This operation requires the key/backup permission.
     * @param keyName The name of the key. (required)
     * @param apiVersion Client API version. (required)
     * @return BackupKeyResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public BackupKeyResult backupKey(String keyName, String apiVersion) throws ApiException {
        ApiResponse<BackupKeyResult> resp = backupKeyWithHttpInfo(keyName, apiVersion);
        return resp.getData();
    }

    /**
     * Requests that a backup of the specified key be downloaded to the client.
     * The Key Backup operation exports a key from Azure Key Vault in a protected form. Note that this operation does NOT return key material in a form that can be used outside the Azure Key Vault system, the returned key material is either protected to a Azure Key Vault HSM or to Azure Key Vault itself. The intent of this operation is to allow a client to GENERATE a key in one Azure Key Vault instance, BACKUP the key, and then RESTORE it into another Azure Key Vault instance. The BACKUP operation may be used to export, in protected form, any key type from Azure Key Vault. Individual versions of a key cannot be backed up. BACKUP / RESTORE can be performed within geographical boundaries only; meaning that a BACKUP from one geographical area cannot be restored to another geographical area. For example, a backup from the US geographical area cannot be restored in an EU geographical area. This operation requires the key/backup permission.
     * @param keyName The name of the key. (required)
     * @param apiVersion Client API version. (required)
     * @return ApiResponse&lt;BackupKeyResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<BackupKeyResult> backupKeyWithHttpInfo(String keyName, String apiVersion) throws ApiException {
        com.squareup.okhttp.Call call = backupKeyValidateBeforeCall(keyName, apiVersion, null, null);
        Type localVarReturnType = new TypeToken<BackupKeyResult>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Requests that a backup of the specified key be downloaded to the client. (asynchronously)
     * The Key Backup operation exports a key from Azure Key Vault in a protected form. Note that this operation does NOT return key material in a form that can be used outside the Azure Key Vault system, the returned key material is either protected to a Azure Key Vault HSM or to Azure Key Vault itself. The intent of this operation is to allow a client to GENERATE a key in one Azure Key Vault instance, BACKUP the key, and then RESTORE it into another Azure Key Vault instance. The BACKUP operation may be used to export, in protected form, any key type from Azure Key Vault. Individual versions of a key cannot be backed up. BACKUP / RESTORE can be performed within geographical boundaries only; meaning that a BACKUP from one geographical area cannot be restored to another geographical area. For example, a backup from the US geographical area cannot be restored in an EU geographical area. This operation requires the key/backup permission.
     * @param keyName The name of the key. (required)
     * @param apiVersion Client API version. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call backupKeyAsync(String keyName, String apiVersion, final ApiCallback<BackupKeyResult> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = backupKeyValidateBeforeCall(keyName, apiVersion, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<BackupKeyResult>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for createKey
     * @param keyName The name for the new key. The system will generate the version name for the new key. (required)
     * @param parameters The parameters to create a key. (required)
     * @param apiVersion Client API version. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createKeyCall(String keyName, KeyCreateParameters parameters, String apiVersion, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = parameters;

        // create path and map variables
        String localVarPath = "/keys/{key-name}/create"
            .replaceAll("\\{" + "key-name" + "\\}", apiClient.escapeString(keyName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (apiVersion != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("api-version", apiVersion));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createKeyValidateBeforeCall(String keyName, KeyCreateParameters parameters, String apiVersion, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'keyName' is set
        if (keyName == null) {
            throw new ApiException("Missing the required parameter 'keyName' when calling createKey(Async)");
        }
        
        // verify the required parameter 'parameters' is set
        if (parameters == null) {
            throw new ApiException("Missing the required parameter 'parameters' when calling createKey(Async)");
        }
        
        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling createKey(Async)");
        }
        

        com.squareup.okhttp.Call call = createKeyCall(keyName, parameters, apiVersion, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Creates a new key, stores it, then returns key parameters and attributes to the client.
     * The create key operation can be used to create any key type in Azure Key Vault. If the named key already exists, Azure Key Vault creates a new version of the key. It requires the keys/create permission.
     * @param keyName The name for the new key. The system will generate the version name for the new key. (required)
     * @param parameters The parameters to create a key. (required)
     * @param apiVersion Client API version. (required)
     * @return KeyBundle
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public KeyBundle createKey(String keyName, KeyCreateParameters parameters, String apiVersion) throws ApiException {
        ApiResponse<KeyBundle> resp = createKeyWithHttpInfo(keyName, parameters, apiVersion);
        return resp.getData();
    }

    /**
     * Creates a new key, stores it, then returns key parameters and attributes to the client.
     * The create key operation can be used to create any key type in Azure Key Vault. If the named key already exists, Azure Key Vault creates a new version of the key. It requires the keys/create permission.
     * @param keyName The name for the new key. The system will generate the version name for the new key. (required)
     * @param parameters The parameters to create a key. (required)
     * @param apiVersion Client API version. (required)
     * @return ApiResponse&lt;KeyBundle&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<KeyBundle> createKeyWithHttpInfo(String keyName, KeyCreateParameters parameters, String apiVersion) throws ApiException {
        com.squareup.okhttp.Call call = createKeyValidateBeforeCall(keyName, parameters, apiVersion, null, null);
        Type localVarReturnType = new TypeToken<KeyBundle>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Creates a new key, stores it, then returns key parameters and attributes to the client. (asynchronously)
     * The create key operation can be used to create any key type in Azure Key Vault. If the named key already exists, Azure Key Vault creates a new version of the key. It requires the keys/create permission.
     * @param keyName The name for the new key. The system will generate the version name for the new key. (required)
     * @param parameters The parameters to create a key. (required)
     * @param apiVersion Client API version. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createKeyAsync(String keyName, KeyCreateParameters parameters, String apiVersion, final ApiCallback<KeyBundle> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createKeyValidateBeforeCall(keyName, parameters, apiVersion, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<KeyBundle>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for decrypt
     * @param keyName The name of the key. (required)
     * @param keyVersion The version of the key. (required)
     * @param parameters The parameters for the decryption operation. (required)
     * @param apiVersion Client API version. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call decryptCall(String keyName, String keyVersion, KeyOperationsParameters parameters, String apiVersion, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = parameters;

        // create path and map variables
        String localVarPath = "/keys/{key-name}/{key-version}/decrypt"
            .replaceAll("\\{" + "key-name" + "\\}", apiClient.escapeString(keyName.toString()))
            .replaceAll("\\{" + "key-version" + "\\}", apiClient.escapeString(keyVersion.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (apiVersion != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("api-version", apiVersion));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call decryptValidateBeforeCall(String keyName, String keyVersion, KeyOperationsParameters parameters, String apiVersion, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'keyName' is set
        if (keyName == null) {
            throw new ApiException("Missing the required parameter 'keyName' when calling decrypt(Async)");
        }
        
        // verify the required parameter 'keyVersion' is set
        if (keyVersion == null) {
            throw new ApiException("Missing the required parameter 'keyVersion' when calling decrypt(Async)");
        }
        
        // verify the required parameter 'parameters' is set
        if (parameters == null) {
            throw new ApiException("Missing the required parameter 'parameters' when calling decrypt(Async)");
        }
        
        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling decrypt(Async)");
        }
        

        com.squareup.okhttp.Call call = decryptCall(keyName, keyVersion, parameters, apiVersion, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Decrypts a single block of encrypted data.
     * The DECRYPT operation decrypts a well-formed block of ciphertext using the target encryption key and specified algorithm. This operation is the reverse of the ENCRYPT operation; only a single block of data may be decrypted, the size of this block is dependent on the target key and the algorithm to be used. The DECRYPT operation applies to asymmetric and symmetric keys stored in Azure Key Vault since it uses the private portion of the key. This operation requires the keys/decrypt permission.
     * @param keyName The name of the key. (required)
     * @param keyVersion The version of the key. (required)
     * @param parameters The parameters for the decryption operation. (required)
     * @param apiVersion Client API version. (required)
     * @return KeyOperationResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public KeyOperationResult decrypt(String keyName, String keyVersion, KeyOperationsParameters parameters, String apiVersion) throws ApiException {
        ApiResponse<KeyOperationResult> resp = decryptWithHttpInfo(keyName, keyVersion, parameters, apiVersion);
        return resp.getData();
    }

    /**
     * Decrypts a single block of encrypted data.
     * The DECRYPT operation decrypts a well-formed block of ciphertext using the target encryption key and specified algorithm. This operation is the reverse of the ENCRYPT operation; only a single block of data may be decrypted, the size of this block is dependent on the target key and the algorithm to be used. The DECRYPT operation applies to asymmetric and symmetric keys stored in Azure Key Vault since it uses the private portion of the key. This operation requires the keys/decrypt permission.
     * @param keyName The name of the key. (required)
     * @param keyVersion The version of the key. (required)
     * @param parameters The parameters for the decryption operation. (required)
     * @param apiVersion Client API version. (required)
     * @return ApiResponse&lt;KeyOperationResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<KeyOperationResult> decryptWithHttpInfo(String keyName, String keyVersion, KeyOperationsParameters parameters, String apiVersion) throws ApiException {
        com.squareup.okhttp.Call call = decryptValidateBeforeCall(keyName, keyVersion, parameters, apiVersion, null, null);
        Type localVarReturnType = new TypeToken<KeyOperationResult>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Decrypts a single block of encrypted data. (asynchronously)
     * The DECRYPT operation decrypts a well-formed block of ciphertext using the target encryption key and specified algorithm. This operation is the reverse of the ENCRYPT operation; only a single block of data may be decrypted, the size of this block is dependent on the target key and the algorithm to be used. The DECRYPT operation applies to asymmetric and symmetric keys stored in Azure Key Vault since it uses the private portion of the key. This operation requires the keys/decrypt permission.
     * @param keyName The name of the key. (required)
     * @param keyVersion The version of the key. (required)
     * @param parameters The parameters for the decryption operation. (required)
     * @param apiVersion Client API version. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call decryptAsync(String keyName, String keyVersion, KeyOperationsParameters parameters, String apiVersion, final ApiCallback<KeyOperationResult> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = decryptValidateBeforeCall(keyName, keyVersion, parameters, apiVersion, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<KeyOperationResult>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for deleteKey
     * @param keyName The name of the key to delete. (required)
     * @param apiVersion Client API version. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteKeyCall(String keyName, String apiVersion, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/keys/{key-name}"
            .replaceAll("\\{" + "key-name" + "\\}", apiClient.escapeString(keyName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (apiVersion != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("api-version", apiVersion));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteKeyValidateBeforeCall(String keyName, String apiVersion, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'keyName' is set
        if (keyName == null) {
            throw new ApiException("Missing the required parameter 'keyName' when calling deleteKey(Async)");
        }
        
        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling deleteKey(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteKeyCall(keyName, apiVersion, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Deletes a key of any type from storage in Azure Key Vault.
     * The delete key operation cannot be used to remove individual versions of a key. This operation removes the cryptographic material associated with the key, which means the key is not usable for Sign/Verify, Wrap/Unwrap or Encrypt/Decrypt operations. This operation requires the keys/delete permission.
     * @param keyName The name of the key to delete. (required)
     * @param apiVersion Client API version. (required)
     * @return DeletedKeyBundle
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public DeletedKeyBundle deleteKey(String keyName, String apiVersion) throws ApiException {
        ApiResponse<DeletedKeyBundle> resp = deleteKeyWithHttpInfo(keyName, apiVersion);
        return resp.getData();
    }

    /**
     * Deletes a key of any type from storage in Azure Key Vault.
     * The delete key operation cannot be used to remove individual versions of a key. This operation removes the cryptographic material associated with the key, which means the key is not usable for Sign/Verify, Wrap/Unwrap or Encrypt/Decrypt operations. This operation requires the keys/delete permission.
     * @param keyName The name of the key to delete. (required)
     * @param apiVersion Client API version. (required)
     * @return ApiResponse&lt;DeletedKeyBundle&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<DeletedKeyBundle> deleteKeyWithHttpInfo(String keyName, String apiVersion) throws ApiException {
        com.squareup.okhttp.Call call = deleteKeyValidateBeforeCall(keyName, apiVersion, null, null);
        Type localVarReturnType = new TypeToken<DeletedKeyBundle>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Deletes a key of any type from storage in Azure Key Vault. (asynchronously)
     * The delete key operation cannot be used to remove individual versions of a key. This operation removes the cryptographic material associated with the key, which means the key is not usable for Sign/Verify, Wrap/Unwrap or Encrypt/Decrypt operations. This operation requires the keys/delete permission.
     * @param keyName The name of the key to delete. (required)
     * @param apiVersion Client API version. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteKeyAsync(String keyName, String apiVersion, final ApiCallback<DeletedKeyBundle> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteKeyValidateBeforeCall(keyName, apiVersion, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<DeletedKeyBundle>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for encrypt
     * @param keyName The name of the key. (required)
     * @param keyVersion The version of the key. (required)
     * @param parameters The parameters for the encryption operation. (required)
     * @param apiVersion Client API version. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call encryptCall(String keyName, String keyVersion, KeyOperationsParameters parameters, String apiVersion, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = parameters;

        // create path and map variables
        String localVarPath = "/keys/{key-name}/{key-version}/encrypt"
            .replaceAll("\\{" + "key-name" + "\\}", apiClient.escapeString(keyName.toString()))
            .replaceAll("\\{" + "key-version" + "\\}", apiClient.escapeString(keyVersion.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (apiVersion != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("api-version", apiVersion));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call encryptValidateBeforeCall(String keyName, String keyVersion, KeyOperationsParameters parameters, String apiVersion, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'keyName' is set
        if (keyName == null) {
            throw new ApiException("Missing the required parameter 'keyName' when calling encrypt(Async)");
        }
        
        // verify the required parameter 'keyVersion' is set
        if (keyVersion == null) {
            throw new ApiException("Missing the required parameter 'keyVersion' when calling encrypt(Async)");
        }
        
        // verify the required parameter 'parameters' is set
        if (parameters == null) {
            throw new ApiException("Missing the required parameter 'parameters' when calling encrypt(Async)");
        }
        
        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling encrypt(Async)");
        }
        

        com.squareup.okhttp.Call call = encryptCall(keyName, keyVersion, parameters, apiVersion, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Encrypts an arbitrary sequence of bytes using an encryption key that is stored in a key vault.
     * The ENCRYPT operation encrypts an arbitrary sequence of bytes using an encryption key that is stored in Azure Key Vault. Note that the ENCRYPT operation only supports a single block of data, the size of which is dependent on the target key and the encryption algorithm to be used. The ENCRYPT operation is only strictly necessary for symmetric keys stored in Azure Key Vault since protection with an asymmetric key can be performed using public portion of the key. This operation is supported for asymmetric keys as a convenience for callers that have a key-reference but do not have access to the public key material. This operation requires the keys/encypt permission.
     * @param keyName The name of the key. (required)
     * @param keyVersion The version of the key. (required)
     * @param parameters The parameters for the encryption operation. (required)
     * @param apiVersion Client API version. (required)
     * @return KeyOperationResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public KeyOperationResult encrypt(String keyName, String keyVersion, KeyOperationsParameters parameters, String apiVersion) throws ApiException {
        ApiResponse<KeyOperationResult> resp = encryptWithHttpInfo(keyName, keyVersion, parameters, apiVersion);
        return resp.getData();
    }

    /**
     * Encrypts an arbitrary sequence of bytes using an encryption key that is stored in a key vault.
     * The ENCRYPT operation encrypts an arbitrary sequence of bytes using an encryption key that is stored in Azure Key Vault. Note that the ENCRYPT operation only supports a single block of data, the size of which is dependent on the target key and the encryption algorithm to be used. The ENCRYPT operation is only strictly necessary for symmetric keys stored in Azure Key Vault since protection with an asymmetric key can be performed using public portion of the key. This operation is supported for asymmetric keys as a convenience for callers that have a key-reference but do not have access to the public key material. This operation requires the keys/encypt permission.
     * @param keyName The name of the key. (required)
     * @param keyVersion The version of the key. (required)
     * @param parameters The parameters for the encryption operation. (required)
     * @param apiVersion Client API version. (required)
     * @return ApiResponse&lt;KeyOperationResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<KeyOperationResult> encryptWithHttpInfo(String keyName, String keyVersion, KeyOperationsParameters parameters, String apiVersion) throws ApiException {
        com.squareup.okhttp.Call call = encryptValidateBeforeCall(keyName, keyVersion, parameters, apiVersion, null, null);
        Type localVarReturnType = new TypeToken<KeyOperationResult>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Encrypts an arbitrary sequence of bytes using an encryption key that is stored in a key vault. (asynchronously)
     * The ENCRYPT operation encrypts an arbitrary sequence of bytes using an encryption key that is stored in Azure Key Vault. Note that the ENCRYPT operation only supports a single block of data, the size of which is dependent on the target key and the encryption algorithm to be used. The ENCRYPT operation is only strictly necessary for symmetric keys stored in Azure Key Vault since protection with an asymmetric key can be performed using public portion of the key. This operation is supported for asymmetric keys as a convenience for callers that have a key-reference but do not have access to the public key material. This operation requires the keys/encypt permission.
     * @param keyName The name of the key. (required)
     * @param keyVersion The version of the key. (required)
     * @param parameters The parameters for the encryption operation. (required)
     * @param apiVersion Client API version. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call encryptAsync(String keyName, String keyVersion, KeyOperationsParameters parameters, String apiVersion, final ApiCallback<KeyOperationResult> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = encryptValidateBeforeCall(keyName, keyVersion, parameters, apiVersion, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<KeyOperationResult>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getKey
     * @param keyName The name of the key to get. (required)
     * @param keyVersion Adding the version parameter retrieves a specific version of a key. (required)
     * @param apiVersion Client API version. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getKeyCall(String keyName, String keyVersion, String apiVersion, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/keys/{key-name}/{key-version}"
            .replaceAll("\\{" + "key-name" + "\\}", apiClient.escapeString(keyName.toString()))
            .replaceAll("\\{" + "key-version" + "\\}", apiClient.escapeString(keyVersion.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (apiVersion != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("api-version", apiVersion));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getKeyValidateBeforeCall(String keyName, String keyVersion, String apiVersion, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'keyName' is set
        if (keyName == null) {
            throw new ApiException("Missing the required parameter 'keyName' when calling getKey(Async)");
        }
        
        // verify the required parameter 'keyVersion' is set
        if (keyVersion == null) {
            throw new ApiException("Missing the required parameter 'keyVersion' when calling getKey(Async)");
        }
        
        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling getKey(Async)");
        }
        

        com.squareup.okhttp.Call call = getKeyCall(keyName, keyVersion, apiVersion, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Gets the public part of a stored key.
     * The get key operation is applicable to all key types. If the requested key is symmetric, then no key material is released in the response. This operation requires the keys/get permission.
     * @param keyName The name of the key to get. (required)
     * @param keyVersion Adding the version parameter retrieves a specific version of a key. (required)
     * @param apiVersion Client API version. (required)
     * @return KeyBundle
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public KeyBundle getKey(String keyName, String keyVersion, String apiVersion) throws ApiException {
        ApiResponse<KeyBundle> resp = getKeyWithHttpInfo(keyName, keyVersion, apiVersion);
        return resp.getData();
    }

    /**
     * Gets the public part of a stored key.
     * The get key operation is applicable to all key types. If the requested key is symmetric, then no key material is released in the response. This operation requires the keys/get permission.
     * @param keyName The name of the key to get. (required)
     * @param keyVersion Adding the version parameter retrieves a specific version of a key. (required)
     * @param apiVersion Client API version. (required)
     * @return ApiResponse&lt;KeyBundle&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<KeyBundle> getKeyWithHttpInfo(String keyName, String keyVersion, String apiVersion) throws ApiException {
        com.squareup.okhttp.Call call = getKeyValidateBeforeCall(keyName, keyVersion, apiVersion, null, null);
        Type localVarReturnType = new TypeToken<KeyBundle>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Gets the public part of a stored key. (asynchronously)
     * The get key operation is applicable to all key types. If the requested key is symmetric, then no key material is released in the response. This operation requires the keys/get permission.
     * @param keyName The name of the key to get. (required)
     * @param keyVersion Adding the version parameter retrieves a specific version of a key. (required)
     * @param apiVersion Client API version. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getKeyAsync(String keyName, String keyVersion, String apiVersion, final ApiCallback<KeyBundle> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getKeyValidateBeforeCall(keyName, keyVersion, apiVersion, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<KeyBundle>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getKeyVersions
     * @param keyName The name of the key. (required)
     * @param apiVersion Client API version. (required)
     * @param maxresults Maximum number of results to return in a page. If not specified the service will return up to 25 results. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getKeyVersionsCall(String keyName, String apiVersion, Integer maxresults, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/keys/{key-name}/versions"
            .replaceAll("\\{" + "key-name" + "\\}", apiClient.escapeString(keyName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (maxresults != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("maxresults", maxresults));
        if (apiVersion != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("api-version", apiVersion));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getKeyVersionsValidateBeforeCall(String keyName, String apiVersion, Integer maxresults, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'keyName' is set
        if (keyName == null) {
            throw new ApiException("Missing the required parameter 'keyName' when calling getKeyVersions(Async)");
        }
        
        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling getKeyVersions(Async)");
        }
        

        com.squareup.okhttp.Call call = getKeyVersionsCall(keyName, apiVersion, maxresults, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieves a list of individual key versions with the same key name.
     * The full key identifier, attributes, and tags are provided in the response. This operation requires the keys/list permission.
     * @param keyName The name of the key. (required)
     * @param apiVersion Client API version. (required)
     * @param maxresults Maximum number of results to return in a page. If not specified the service will return up to 25 results. (optional)
     * @return KeyListResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public KeyListResult getKeyVersions(String keyName, String apiVersion, Integer maxresults) throws ApiException {
        ApiResponse<KeyListResult> resp = getKeyVersionsWithHttpInfo(keyName, apiVersion, maxresults);
        return resp.getData();
    }

    /**
     * Retrieves a list of individual key versions with the same key name.
     * The full key identifier, attributes, and tags are provided in the response. This operation requires the keys/list permission.
     * @param keyName The name of the key. (required)
     * @param apiVersion Client API version. (required)
     * @param maxresults Maximum number of results to return in a page. If not specified the service will return up to 25 results. (optional)
     * @return ApiResponse&lt;KeyListResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<KeyListResult> getKeyVersionsWithHttpInfo(String keyName, String apiVersion, Integer maxresults) throws ApiException {
        com.squareup.okhttp.Call call = getKeyVersionsValidateBeforeCall(keyName, apiVersion, maxresults, null, null);
        Type localVarReturnType = new TypeToken<KeyListResult>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieves a list of individual key versions with the same key name. (asynchronously)
     * The full key identifier, attributes, and tags are provided in the response. This operation requires the keys/list permission.
     * @param keyName The name of the key. (required)
     * @param apiVersion Client API version. (required)
     * @param maxresults Maximum number of results to return in a page. If not specified the service will return up to 25 results. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getKeyVersionsAsync(String keyName, String apiVersion, Integer maxresults, final ApiCallback<KeyListResult> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getKeyVersionsValidateBeforeCall(keyName, apiVersion, maxresults, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<KeyListResult>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getKeys
     * @param apiVersion Client API version. (required)
     * @param maxresults Maximum number of results to return in a page. If not specified the service will return up to 25 results. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getKeysCall(String apiVersion, Integer maxresults, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/keys";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (maxresults != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("maxresults", maxresults));
        if (apiVersion != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("api-version", apiVersion));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getKeysValidateBeforeCall(String apiVersion, Integer maxresults, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling getKeys(Async)");
        }
        

        com.squareup.okhttp.Call call = getKeysCall(apiVersion, maxresults, progressListener, progressRequestListener);
        return call;

    }

    /**
     * List keys in the specified vault.
     * Retrieves a list of the keys in the Key Vault as JSON Web Key structures that contain the public part of a stored key. The LIST operation is applicable to all key types, however only the base key identifier, attributes, and tags are provided in the response. Individual versions of a key are not listed in the response. This operation requires the keys/list permission.
     * @param apiVersion Client API version. (required)
     * @param maxresults Maximum number of results to return in a page. If not specified the service will return up to 25 results. (optional)
     * @return KeyListResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public KeyListResult getKeys(String apiVersion, Integer maxresults) throws ApiException {
        ApiResponse<KeyListResult> resp = getKeysWithHttpInfo(apiVersion, maxresults);
        return resp.getData();
    }

    /**
     * List keys in the specified vault.
     * Retrieves a list of the keys in the Key Vault as JSON Web Key structures that contain the public part of a stored key. The LIST operation is applicable to all key types, however only the base key identifier, attributes, and tags are provided in the response. Individual versions of a key are not listed in the response. This operation requires the keys/list permission.
     * @param apiVersion Client API version. (required)
     * @param maxresults Maximum number of results to return in a page. If not specified the service will return up to 25 results. (optional)
     * @return ApiResponse&lt;KeyListResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<KeyListResult> getKeysWithHttpInfo(String apiVersion, Integer maxresults) throws ApiException {
        com.squareup.okhttp.Call call = getKeysValidateBeforeCall(apiVersion, maxresults, null, null);
        Type localVarReturnType = new TypeToken<KeyListResult>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * List keys in the specified vault. (asynchronously)
     * Retrieves a list of the keys in the Key Vault as JSON Web Key structures that contain the public part of a stored key. The LIST operation is applicable to all key types, however only the base key identifier, attributes, and tags are provided in the response. Individual versions of a key are not listed in the response. This operation requires the keys/list permission.
     * @param apiVersion Client API version. (required)
     * @param maxresults Maximum number of results to return in a page. If not specified the service will return up to 25 results. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getKeysAsync(String apiVersion, Integer maxresults, final ApiCallback<KeyListResult> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getKeysValidateBeforeCall(apiVersion, maxresults, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<KeyListResult>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for importKey
     * @param keyName Name for the imported key. (required)
     * @param parameters The parameters to import a key. (required)
     * @param apiVersion Client API version. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call importKeyCall(String keyName, KeyImportParameters parameters, String apiVersion, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = parameters;

        // create path and map variables
        String localVarPath = "/keys/{key-name}"
            .replaceAll("\\{" + "key-name" + "\\}", apiClient.escapeString(keyName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (apiVersion != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("api-version", apiVersion));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call importKeyValidateBeforeCall(String keyName, KeyImportParameters parameters, String apiVersion, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'keyName' is set
        if (keyName == null) {
            throw new ApiException("Missing the required parameter 'keyName' when calling importKey(Async)");
        }
        
        // verify the required parameter 'parameters' is set
        if (parameters == null) {
            throw new ApiException("Missing the required parameter 'parameters' when calling importKey(Async)");
        }
        
        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling importKey(Async)");
        }
        

        com.squareup.okhttp.Call call = importKeyCall(keyName, parameters, apiVersion, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Imports an externally created key, stores it, and returns key parameters and attributes to the client.
     * The import key operation may be used to import any key type into an Azure Key Vault. If the named key already exists, Azure Key Vault creates a new version of the key. This operation requires the keys/import permission.
     * @param keyName Name for the imported key. (required)
     * @param parameters The parameters to import a key. (required)
     * @param apiVersion Client API version. (required)
     * @return KeyBundle
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public KeyBundle importKey(String keyName, KeyImportParameters parameters, String apiVersion) throws ApiException {
        ApiResponse<KeyBundle> resp = importKeyWithHttpInfo(keyName, parameters, apiVersion);
        return resp.getData();
    }

    /**
     * Imports an externally created key, stores it, and returns key parameters and attributes to the client.
     * The import key operation may be used to import any key type into an Azure Key Vault. If the named key already exists, Azure Key Vault creates a new version of the key. This operation requires the keys/import permission.
     * @param keyName Name for the imported key. (required)
     * @param parameters The parameters to import a key. (required)
     * @param apiVersion Client API version. (required)
     * @return ApiResponse&lt;KeyBundle&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<KeyBundle> importKeyWithHttpInfo(String keyName, KeyImportParameters parameters, String apiVersion) throws ApiException {
        com.squareup.okhttp.Call call = importKeyValidateBeforeCall(keyName, parameters, apiVersion, null, null);
        Type localVarReturnType = new TypeToken<KeyBundle>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Imports an externally created key, stores it, and returns key parameters and attributes to the client. (asynchronously)
     * The import key operation may be used to import any key type into an Azure Key Vault. If the named key already exists, Azure Key Vault creates a new version of the key. This operation requires the keys/import permission.
     * @param keyName Name for the imported key. (required)
     * @param parameters The parameters to import a key. (required)
     * @param apiVersion Client API version. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call importKeyAsync(String keyName, KeyImportParameters parameters, String apiVersion, final ApiCallback<KeyBundle> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = importKeyValidateBeforeCall(keyName, parameters, apiVersion, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<KeyBundle>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for restoreKey
     * @param parameters The parameters to restore the key. (required)
     * @param apiVersion Client API version. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call restoreKeyCall(KeyRestoreParameters parameters, String apiVersion, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = parameters;

        // create path and map variables
        String localVarPath = "/keys/restore";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (apiVersion != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("api-version", apiVersion));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call restoreKeyValidateBeforeCall(KeyRestoreParameters parameters, String apiVersion, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'parameters' is set
        if (parameters == null) {
            throw new ApiException("Missing the required parameter 'parameters' when calling restoreKey(Async)");
        }
        
        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling restoreKey(Async)");
        }
        

        com.squareup.okhttp.Call call = restoreKeyCall(parameters, apiVersion, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Restores a backed up key to a vault.
     * Imports a previously backed up key into Azure Key Vault, restoring the key, its key identifier, attributes and access control policies. The RESTORE operation may be used to import a previously backed up key. Individual versions of a key cannot be restored. The key is restored in its entirety with the same key name as it had when it was backed up. If the key name is not available in the target Key Vault, the RESTORE operation will be rejected. While the key name is retained during restore, the final key identifier will change if the key is restored to a different vault. Restore will restore all versions and preserve version identifiers. The RESTORE operation is subject to security constraints: The target Key Vault must be owned by the same Microsoft Azure Subscription as the source Key Vault The user must have RESTORE permission in the target Key Vault. This operation requires the keys/restore permission.
     * @param parameters The parameters to restore the key. (required)
     * @param apiVersion Client API version. (required)
     * @return KeyBundle
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public KeyBundle restoreKey(KeyRestoreParameters parameters, String apiVersion) throws ApiException {
        ApiResponse<KeyBundle> resp = restoreKeyWithHttpInfo(parameters, apiVersion);
        return resp.getData();
    }

    /**
     * Restores a backed up key to a vault.
     * Imports a previously backed up key into Azure Key Vault, restoring the key, its key identifier, attributes and access control policies. The RESTORE operation may be used to import a previously backed up key. Individual versions of a key cannot be restored. The key is restored in its entirety with the same key name as it had when it was backed up. If the key name is not available in the target Key Vault, the RESTORE operation will be rejected. While the key name is retained during restore, the final key identifier will change if the key is restored to a different vault. Restore will restore all versions and preserve version identifiers. The RESTORE operation is subject to security constraints: The target Key Vault must be owned by the same Microsoft Azure Subscription as the source Key Vault The user must have RESTORE permission in the target Key Vault. This operation requires the keys/restore permission.
     * @param parameters The parameters to restore the key. (required)
     * @param apiVersion Client API version. (required)
     * @return ApiResponse&lt;KeyBundle&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<KeyBundle> restoreKeyWithHttpInfo(KeyRestoreParameters parameters, String apiVersion) throws ApiException {
        com.squareup.okhttp.Call call = restoreKeyValidateBeforeCall(parameters, apiVersion, null, null);
        Type localVarReturnType = new TypeToken<KeyBundle>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Restores a backed up key to a vault. (asynchronously)
     * Imports a previously backed up key into Azure Key Vault, restoring the key, its key identifier, attributes and access control policies. The RESTORE operation may be used to import a previously backed up key. Individual versions of a key cannot be restored. The key is restored in its entirety with the same key name as it had when it was backed up. If the key name is not available in the target Key Vault, the RESTORE operation will be rejected. While the key name is retained during restore, the final key identifier will change if the key is restored to a different vault. Restore will restore all versions and preserve version identifiers. The RESTORE operation is subject to security constraints: The target Key Vault must be owned by the same Microsoft Azure Subscription as the source Key Vault The user must have RESTORE permission in the target Key Vault. This operation requires the keys/restore permission.
     * @param parameters The parameters to restore the key. (required)
     * @param apiVersion Client API version. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call restoreKeyAsync(KeyRestoreParameters parameters, String apiVersion, final ApiCallback<KeyBundle> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = restoreKeyValidateBeforeCall(parameters, apiVersion, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<KeyBundle>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for sign
     * @param keyName The name of the key. (required)
     * @param keyVersion The version of the key. (required)
     * @param parameters The parameters for the signing operation. (required)
     * @param apiVersion Client API version. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call signCall(String keyName, String keyVersion, KeySignParameters parameters, String apiVersion, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = parameters;

        // create path and map variables
        String localVarPath = "/keys/{key-name}/{key-version}/sign"
            .replaceAll("\\{" + "key-name" + "\\}", apiClient.escapeString(keyName.toString()))
            .replaceAll("\\{" + "key-version" + "\\}", apiClient.escapeString(keyVersion.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (apiVersion != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("api-version", apiVersion));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call signValidateBeforeCall(String keyName, String keyVersion, KeySignParameters parameters, String apiVersion, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'keyName' is set
        if (keyName == null) {
            throw new ApiException("Missing the required parameter 'keyName' when calling sign(Async)");
        }
        
        // verify the required parameter 'keyVersion' is set
        if (keyVersion == null) {
            throw new ApiException("Missing the required parameter 'keyVersion' when calling sign(Async)");
        }
        
        // verify the required parameter 'parameters' is set
        if (parameters == null) {
            throw new ApiException("Missing the required parameter 'parameters' when calling sign(Async)");
        }
        
        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling sign(Async)");
        }
        

        com.squareup.okhttp.Call call = signCall(keyName, keyVersion, parameters, apiVersion, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Creates a signature from a digest using the specified key.
     * The SIGN operation is applicable to asymmetric and symmetric keys stored in Azure Key Vault since this operation uses the private portion of the key. This operation requires the keys/sign permission.
     * @param keyName The name of the key. (required)
     * @param keyVersion The version of the key. (required)
     * @param parameters The parameters for the signing operation. (required)
     * @param apiVersion Client API version. (required)
     * @return KeyOperationResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public KeyOperationResult sign(String keyName, String keyVersion, KeySignParameters parameters, String apiVersion) throws ApiException {
        ApiResponse<KeyOperationResult> resp = signWithHttpInfo(keyName, keyVersion, parameters, apiVersion);
        return resp.getData();
    }

    /**
     * Creates a signature from a digest using the specified key.
     * The SIGN operation is applicable to asymmetric and symmetric keys stored in Azure Key Vault since this operation uses the private portion of the key. This operation requires the keys/sign permission.
     * @param keyName The name of the key. (required)
     * @param keyVersion The version of the key. (required)
     * @param parameters The parameters for the signing operation. (required)
     * @param apiVersion Client API version. (required)
     * @return ApiResponse&lt;KeyOperationResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<KeyOperationResult> signWithHttpInfo(String keyName, String keyVersion, KeySignParameters parameters, String apiVersion) throws ApiException {
        com.squareup.okhttp.Call call = signValidateBeforeCall(keyName, keyVersion, parameters, apiVersion, null, null);
        Type localVarReturnType = new TypeToken<KeyOperationResult>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Creates a signature from a digest using the specified key. (asynchronously)
     * The SIGN operation is applicable to asymmetric and symmetric keys stored in Azure Key Vault since this operation uses the private portion of the key. This operation requires the keys/sign permission.
     * @param keyName The name of the key. (required)
     * @param keyVersion The version of the key. (required)
     * @param parameters The parameters for the signing operation. (required)
     * @param apiVersion Client API version. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call signAsync(String keyName, String keyVersion, KeySignParameters parameters, String apiVersion, final ApiCallback<KeyOperationResult> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = signValidateBeforeCall(keyName, keyVersion, parameters, apiVersion, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<KeyOperationResult>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for unwrapKey
     * @param keyName The name of the key. (required)
     * @param keyVersion The version of the key. (required)
     * @param parameters The parameters for the key operation. (required)
     * @param apiVersion Client API version. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call unwrapKeyCall(String keyName, String keyVersion, KeyOperationsParameters parameters, String apiVersion, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = parameters;

        // create path and map variables
        String localVarPath = "/keys/{key-name}/{key-version}/unwrapkey"
            .replaceAll("\\{" + "key-name" + "\\}", apiClient.escapeString(keyName.toString()))
            .replaceAll("\\{" + "key-version" + "\\}", apiClient.escapeString(keyVersion.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (apiVersion != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("api-version", apiVersion));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call unwrapKeyValidateBeforeCall(String keyName, String keyVersion, KeyOperationsParameters parameters, String apiVersion, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'keyName' is set
        if (keyName == null) {
            throw new ApiException("Missing the required parameter 'keyName' when calling unwrapKey(Async)");
        }
        
        // verify the required parameter 'keyVersion' is set
        if (keyVersion == null) {
            throw new ApiException("Missing the required parameter 'keyVersion' when calling unwrapKey(Async)");
        }
        
        // verify the required parameter 'parameters' is set
        if (parameters == null) {
            throw new ApiException("Missing the required parameter 'parameters' when calling unwrapKey(Async)");
        }
        
        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling unwrapKey(Async)");
        }
        

        com.squareup.okhttp.Call call = unwrapKeyCall(keyName, keyVersion, parameters, apiVersion, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Unwraps a symmetric key using the specified key that was initially used for wrapping that key.
     * The UNWRAP operation supports decryption of a symmetric key using the target key encryption key. This operation is the reverse of the WRAP operation. The UNWRAP operation applies to asymmetric and symmetric keys stored in Azure Key Vault since it uses the private portion of the key. This operation requires the keys/unwrapKey permission.
     * @param keyName The name of the key. (required)
     * @param keyVersion The version of the key. (required)
     * @param parameters The parameters for the key operation. (required)
     * @param apiVersion Client API version. (required)
     * @return KeyOperationResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public KeyOperationResult unwrapKey(String keyName, String keyVersion, KeyOperationsParameters parameters, String apiVersion) throws ApiException {
        ApiResponse<KeyOperationResult> resp = unwrapKeyWithHttpInfo(keyName, keyVersion, parameters, apiVersion);
        return resp.getData();
    }

    /**
     * Unwraps a symmetric key using the specified key that was initially used for wrapping that key.
     * The UNWRAP operation supports decryption of a symmetric key using the target key encryption key. This operation is the reverse of the WRAP operation. The UNWRAP operation applies to asymmetric and symmetric keys stored in Azure Key Vault since it uses the private portion of the key. This operation requires the keys/unwrapKey permission.
     * @param keyName The name of the key. (required)
     * @param keyVersion The version of the key. (required)
     * @param parameters The parameters for the key operation. (required)
     * @param apiVersion Client API version. (required)
     * @return ApiResponse&lt;KeyOperationResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<KeyOperationResult> unwrapKeyWithHttpInfo(String keyName, String keyVersion, KeyOperationsParameters parameters, String apiVersion) throws ApiException {
        com.squareup.okhttp.Call call = unwrapKeyValidateBeforeCall(keyName, keyVersion, parameters, apiVersion, null, null);
        Type localVarReturnType = new TypeToken<KeyOperationResult>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Unwraps a symmetric key using the specified key that was initially used for wrapping that key. (asynchronously)
     * The UNWRAP operation supports decryption of a symmetric key using the target key encryption key. This operation is the reverse of the WRAP operation. The UNWRAP operation applies to asymmetric and symmetric keys stored in Azure Key Vault since it uses the private portion of the key. This operation requires the keys/unwrapKey permission.
     * @param keyName The name of the key. (required)
     * @param keyVersion The version of the key. (required)
     * @param parameters The parameters for the key operation. (required)
     * @param apiVersion Client API version. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call unwrapKeyAsync(String keyName, String keyVersion, KeyOperationsParameters parameters, String apiVersion, final ApiCallback<KeyOperationResult> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = unwrapKeyValidateBeforeCall(keyName, keyVersion, parameters, apiVersion, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<KeyOperationResult>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updateKey
     * @param keyName The name of key to update. (required)
     * @param keyVersion The version of the key to update. (required)
     * @param parameters The parameters of the key to update. (required)
     * @param apiVersion Client API version. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateKeyCall(String keyName, String keyVersion, KeyUpdateParameters parameters, String apiVersion, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = parameters;

        // create path and map variables
        String localVarPath = "/keys/{key-name}/{key-version}"
            .replaceAll("\\{" + "key-name" + "\\}", apiClient.escapeString(keyName.toString()))
            .replaceAll("\\{" + "key-version" + "\\}", apiClient.escapeString(keyVersion.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (apiVersion != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("api-version", apiVersion));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateKeyValidateBeforeCall(String keyName, String keyVersion, KeyUpdateParameters parameters, String apiVersion, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'keyName' is set
        if (keyName == null) {
            throw new ApiException("Missing the required parameter 'keyName' when calling updateKey(Async)");
        }
        
        // verify the required parameter 'keyVersion' is set
        if (keyVersion == null) {
            throw new ApiException("Missing the required parameter 'keyVersion' when calling updateKey(Async)");
        }
        
        // verify the required parameter 'parameters' is set
        if (parameters == null) {
            throw new ApiException("Missing the required parameter 'parameters' when calling updateKey(Async)");
        }
        
        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling updateKey(Async)");
        }
        

        com.squareup.okhttp.Call call = updateKeyCall(keyName, keyVersion, parameters, apiVersion, progressListener, progressRequestListener);
        return call;

    }

    /**
     * The update key operation changes specified attributes of a stored key and can be applied to any key type and key version stored in Azure Key Vault.
     * In order to perform this operation, the key must already exist in the Key Vault. Note: The cryptographic material of a key itself cannot be changed. This operation requires the keys/update permission.
     * @param keyName The name of key to update. (required)
     * @param keyVersion The version of the key to update. (required)
     * @param parameters The parameters of the key to update. (required)
     * @param apiVersion Client API version. (required)
     * @return KeyBundle
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public KeyBundle updateKey(String keyName, String keyVersion, KeyUpdateParameters parameters, String apiVersion) throws ApiException {
        ApiResponse<KeyBundle> resp = updateKeyWithHttpInfo(keyName, keyVersion, parameters, apiVersion);
        return resp.getData();
    }

    /**
     * The update key operation changes specified attributes of a stored key and can be applied to any key type and key version stored in Azure Key Vault.
     * In order to perform this operation, the key must already exist in the Key Vault. Note: The cryptographic material of a key itself cannot be changed. This operation requires the keys/update permission.
     * @param keyName The name of key to update. (required)
     * @param keyVersion The version of the key to update. (required)
     * @param parameters The parameters of the key to update. (required)
     * @param apiVersion Client API version. (required)
     * @return ApiResponse&lt;KeyBundle&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<KeyBundle> updateKeyWithHttpInfo(String keyName, String keyVersion, KeyUpdateParameters parameters, String apiVersion) throws ApiException {
        com.squareup.okhttp.Call call = updateKeyValidateBeforeCall(keyName, keyVersion, parameters, apiVersion, null, null);
        Type localVarReturnType = new TypeToken<KeyBundle>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * The update key operation changes specified attributes of a stored key and can be applied to any key type and key version stored in Azure Key Vault. (asynchronously)
     * In order to perform this operation, the key must already exist in the Key Vault. Note: The cryptographic material of a key itself cannot be changed. This operation requires the keys/update permission.
     * @param keyName The name of key to update. (required)
     * @param keyVersion The version of the key to update. (required)
     * @param parameters The parameters of the key to update. (required)
     * @param apiVersion Client API version. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateKeyAsync(String keyName, String keyVersion, KeyUpdateParameters parameters, String apiVersion, final ApiCallback<KeyBundle> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateKeyValidateBeforeCall(keyName, keyVersion, parameters, apiVersion, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<KeyBundle>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for verify
     * @param keyName The name of the key. (required)
     * @param keyVersion The version of the key. (required)
     * @param parameters The parameters for verify operations. (required)
     * @param apiVersion Client API version. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call verifyCall(String keyName, String keyVersion, KeyVerifyParameters parameters, String apiVersion, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = parameters;

        // create path and map variables
        String localVarPath = "/keys/{key-name}/{key-version}/verify"
            .replaceAll("\\{" + "key-name" + "\\}", apiClient.escapeString(keyName.toString()))
            .replaceAll("\\{" + "key-version" + "\\}", apiClient.escapeString(keyVersion.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (apiVersion != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("api-version", apiVersion));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call verifyValidateBeforeCall(String keyName, String keyVersion, KeyVerifyParameters parameters, String apiVersion, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'keyName' is set
        if (keyName == null) {
            throw new ApiException("Missing the required parameter 'keyName' when calling verify(Async)");
        }
        
        // verify the required parameter 'keyVersion' is set
        if (keyVersion == null) {
            throw new ApiException("Missing the required parameter 'keyVersion' when calling verify(Async)");
        }
        
        // verify the required parameter 'parameters' is set
        if (parameters == null) {
            throw new ApiException("Missing the required parameter 'parameters' when calling verify(Async)");
        }
        
        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling verify(Async)");
        }
        

        com.squareup.okhttp.Call call = verifyCall(keyName, keyVersion, parameters, apiVersion, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Verifies a signature using a specified key.
     * The VERIFY operation is applicable to symmetric keys stored in Azure Key Vault. VERIFY is not strictly necessary for asymmetric keys stored in Azure Key Vault since signature verification can be performed using the public portion of the key but this operation is supported as a convenience for callers that only have a key-reference and not the public portion of the key. This operation requires the keys/verify permission.
     * @param keyName The name of the key. (required)
     * @param keyVersion The version of the key. (required)
     * @param parameters The parameters for verify operations. (required)
     * @param apiVersion Client API version. (required)
     * @return KeyVerifyResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public KeyVerifyResult verify(String keyName, String keyVersion, KeyVerifyParameters parameters, String apiVersion) throws ApiException {
        ApiResponse<KeyVerifyResult> resp = verifyWithHttpInfo(keyName, keyVersion, parameters, apiVersion);
        return resp.getData();
    }

    /**
     * Verifies a signature using a specified key.
     * The VERIFY operation is applicable to symmetric keys stored in Azure Key Vault. VERIFY is not strictly necessary for asymmetric keys stored in Azure Key Vault since signature verification can be performed using the public portion of the key but this operation is supported as a convenience for callers that only have a key-reference and not the public portion of the key. This operation requires the keys/verify permission.
     * @param keyName The name of the key. (required)
     * @param keyVersion The version of the key. (required)
     * @param parameters The parameters for verify operations. (required)
     * @param apiVersion Client API version. (required)
     * @return ApiResponse&lt;KeyVerifyResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<KeyVerifyResult> verifyWithHttpInfo(String keyName, String keyVersion, KeyVerifyParameters parameters, String apiVersion) throws ApiException {
        com.squareup.okhttp.Call call = verifyValidateBeforeCall(keyName, keyVersion, parameters, apiVersion, null, null);
        Type localVarReturnType = new TypeToken<KeyVerifyResult>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Verifies a signature using a specified key. (asynchronously)
     * The VERIFY operation is applicable to symmetric keys stored in Azure Key Vault. VERIFY is not strictly necessary for asymmetric keys stored in Azure Key Vault since signature verification can be performed using the public portion of the key but this operation is supported as a convenience for callers that only have a key-reference and not the public portion of the key. This operation requires the keys/verify permission.
     * @param keyName The name of the key. (required)
     * @param keyVersion The version of the key. (required)
     * @param parameters The parameters for verify operations. (required)
     * @param apiVersion Client API version. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call verifyAsync(String keyName, String keyVersion, KeyVerifyParameters parameters, String apiVersion, final ApiCallback<KeyVerifyResult> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = verifyValidateBeforeCall(keyName, keyVersion, parameters, apiVersion, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<KeyVerifyResult>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for wrapKey
     * @param keyName The name of the key. (required)
     * @param keyVersion The version of the key. (required)
     * @param parameters The parameters for wrap operation. (required)
     * @param apiVersion Client API version. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call wrapKeyCall(String keyName, String keyVersion, KeyOperationsParameters parameters, String apiVersion, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = parameters;

        // create path and map variables
        String localVarPath = "/keys/{key-name}/{key-version}/wrapkey"
            .replaceAll("\\{" + "key-name" + "\\}", apiClient.escapeString(keyName.toString()))
            .replaceAll("\\{" + "key-version" + "\\}", apiClient.escapeString(keyVersion.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (apiVersion != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("api-version", apiVersion));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call wrapKeyValidateBeforeCall(String keyName, String keyVersion, KeyOperationsParameters parameters, String apiVersion, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'keyName' is set
        if (keyName == null) {
            throw new ApiException("Missing the required parameter 'keyName' when calling wrapKey(Async)");
        }
        
        // verify the required parameter 'keyVersion' is set
        if (keyVersion == null) {
            throw new ApiException("Missing the required parameter 'keyVersion' when calling wrapKey(Async)");
        }
        
        // verify the required parameter 'parameters' is set
        if (parameters == null) {
            throw new ApiException("Missing the required parameter 'parameters' when calling wrapKey(Async)");
        }
        
        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling wrapKey(Async)");
        }
        

        com.squareup.okhttp.Call call = wrapKeyCall(keyName, keyVersion, parameters, apiVersion, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Wraps a symmetric key using a specified key.
     * The WRAP operation supports encryption of a symmetric key using a key encryption key that has previously been stored in an Azure Key Vault. The WRAP operation is only strictly necessary for symmetric keys stored in Azure Key Vault since protection with an asymmetric key can be performed using the public portion of the key. This operation is supported for asymmetric keys as a convenience for callers that have a key-reference but do not have access to the public key material. This operation requires the keys/wrapKey permission.
     * @param keyName The name of the key. (required)
     * @param keyVersion The version of the key. (required)
     * @param parameters The parameters for wrap operation. (required)
     * @param apiVersion Client API version. (required)
     * @return KeyOperationResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public KeyOperationResult wrapKey(String keyName, String keyVersion, KeyOperationsParameters parameters, String apiVersion) throws ApiException {
        ApiResponse<KeyOperationResult> resp = wrapKeyWithHttpInfo(keyName, keyVersion, parameters, apiVersion);
        return resp.getData();
    }

    /**
     * Wraps a symmetric key using a specified key.
     * The WRAP operation supports encryption of a symmetric key using a key encryption key that has previously been stored in an Azure Key Vault. The WRAP operation is only strictly necessary for symmetric keys stored in Azure Key Vault since protection with an asymmetric key can be performed using the public portion of the key. This operation is supported for asymmetric keys as a convenience for callers that have a key-reference but do not have access to the public key material. This operation requires the keys/wrapKey permission.
     * @param keyName The name of the key. (required)
     * @param keyVersion The version of the key. (required)
     * @param parameters The parameters for wrap operation. (required)
     * @param apiVersion Client API version. (required)
     * @return ApiResponse&lt;KeyOperationResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<KeyOperationResult> wrapKeyWithHttpInfo(String keyName, String keyVersion, KeyOperationsParameters parameters, String apiVersion) throws ApiException {
        com.squareup.okhttp.Call call = wrapKeyValidateBeforeCall(keyName, keyVersion, parameters, apiVersion, null, null);
        Type localVarReturnType = new TypeToken<KeyOperationResult>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Wraps a symmetric key using a specified key. (asynchronously)
     * The WRAP operation supports encryption of a symmetric key using a key encryption key that has previously been stored in an Azure Key Vault. The WRAP operation is only strictly necessary for symmetric keys stored in Azure Key Vault since protection with an asymmetric key can be performed using the public portion of the key. This operation is supported for asymmetric keys as a convenience for callers that have a key-reference but do not have access to the public key material. This operation requires the keys/wrapKey permission.
     * @param keyName The name of the key. (required)
     * @param keyVersion The version of the key. (required)
     * @param parameters The parameters for wrap operation. (required)
     * @param apiVersion Client API version. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call wrapKeyAsync(String keyName, String keyVersion, KeyOperationsParameters parameters, String apiVersion, final ApiCallback<KeyOperationResult> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = wrapKeyValidateBeforeCall(keyName, keyVersion, parameters, apiVersion, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<KeyOperationResult>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
