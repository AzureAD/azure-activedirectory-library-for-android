/*
 * KeyVaultClient
 * The key vault client performs cryptographic key operations and vault operations against the Key Vault service.
 *
 * OpenAPI spec version: 2016-10-01
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.microsoft.identity.internal.test.keyvault.model;

import java.util.Objects;

import com.google.gson.annotations.SerializedName;

import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;

import java.util.HashMap;
import java.util.Map;

/**
 * The certificate import parameters.
 */
@ApiModel(description = "The certificate import parameters.")

public class CertificateImportParameters {
  @SerializedName("value")
  private String value = null;

  @SerializedName("pwd")
  private String pwd = null;

  @SerializedName("policy")
  private CertificatePolicy policy = null;

  @SerializedName("attributes")
  private CertificateAttributes attributes = null;

  @SerializedName("tags")
  private Map<String, String> tags = null;

  public CertificateImportParameters value(String value) {
    this.value = value;
    return this;
  }

   /**
   * Base64 encoded representation of the certificate object to import. This certificate needs to contain the private key.
   * @return value
  **/
  @ApiModelProperty(required = true, value = "Base64 encoded representation of the certificate object to import. This certificate needs to contain the private key.")
  public String getValue() {
    return value;
  }

  public void setValue(String value) {
    this.value = value;
  }

  public CertificateImportParameters pwd(String pwd) {
    this.pwd = pwd;
    return this;
  }

   /**
   * If the private key in base64EncodedCertificate is encrypted, the password used for encryption.
   * @return pwd
  **/
  @ApiModelProperty(value = "If the private key in base64EncodedCertificate is encrypted, the password used for encryption.")
  public String getPwd() {
    return pwd;
  }

  public void setPwd(String pwd) {
    this.pwd = pwd;
  }

  public CertificateImportParameters policy(CertificatePolicy policy) {
    this.policy = policy;
    return this;
  }

   /**
   * The management policy for the certificate.
   * @return policy
  **/
  @ApiModelProperty(value = "The management policy for the certificate.")
  public CertificatePolicy getPolicy() {
    return policy;
  }

  public void setPolicy(CertificatePolicy policy) {
    this.policy = policy;
  }

  public CertificateImportParameters attributes(CertificateAttributes attributes) {
    this.attributes = attributes;
    return this;
  }

   /**
   * The attributes of the certificate (optional).
   * @return attributes
  **/
  @ApiModelProperty(value = "The attributes of the certificate (optional).")
  public CertificateAttributes getAttributes() {
    return attributes;
  }

  public void setAttributes(CertificateAttributes attributes) {
    this.attributes = attributes;
  }

  public CertificateImportParameters tags(Map<String, String> tags) {
    this.tags = tags;
    return this;
  }

  public CertificateImportParameters putTagsItem(String key, String tagsItem) {
    if (this.tags == null) {
      this.tags = new HashMap<String, String>();
    }
    this.tags.put(key, tagsItem);
    return this;
  }

   /**
   * Application specific metadata in the form of key-value pairs.
   * @return tags
  **/
  @ApiModelProperty(value = "Application specific metadata in the form of key-value pairs.")
  public Map<String, String> getTags() {
    return tags;
  }

  public void setTags(Map<String, String> tags) {
    this.tags = tags;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CertificateImportParameters certificateImportParameters = (CertificateImportParameters) o;
    return Objects.equals(this.value, certificateImportParameters.value) &&
        Objects.equals(this.pwd, certificateImportParameters.pwd) &&
        Objects.equals(this.policy, certificateImportParameters.policy) &&
        Objects.equals(this.attributes, certificateImportParameters.attributes) &&
        Objects.equals(this.tags, certificateImportParameters.tags);
  }

  @Override
  public int hashCode() {
    return Objects.hash(value, pwd, policy, attributes, tags);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CertificateImportParameters {\n");
    
    sb.append("    value: ").append(toIndentedString(value)).append("\n");
    sb.append("    pwd: ").append(toIndentedString(pwd)).append("\n");
    sb.append("    policy: ").append(toIndentedString(policy)).append("\n");
    sb.append("    attributes: ").append(toIndentedString(attributes)).append("\n");
    sb.append("    tags: ").append(toIndentedString(tags)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

