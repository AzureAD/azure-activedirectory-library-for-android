def getVersionFile() {
    return file('versioning/version.properties')
}

def getVersionProps() {
    def versionPropsFile = getVersionFile()
    def versionProps = new Properties()
    versionProps.load(new FileInputStream(versionPropsFile))
    return versionProps
}

private Integer getVersionNamePatch() {
    return (getVersionProps()['versionName'] =~ /\d+/)[2].toInteger()
}

private Integer getVersionNameMinor() {
    return (getVersionProps()['versionName'] =~ /\d+/)[1].toInteger()
}

private Integer getVersionNameMajor() {
    return (getVersionProps()['versionName'] =~ /\d+/)[0].toInteger()
}

private Integer getVersionNightly(){
    return getVersionProps()['versionNightly'].toInteger()
}

private Integer getVersionRC(){
    return getVersionProps()['versionRC'].toInteger()
}

private void commit(String versionName, String task) {
    Process addChanges = ['git', 'add', 'adal/versioning/version.properties'].execute(null, project.rootDir)
    addChanges.waitForProcessOutput(System.out, System.err)

    Process createCommit = ['git', 'commit', "-m ${task} Release ${versionName}"].execute(null,  project.rootDir)
    createCommit.waitForProcessOutput(System.out, System.err)
}

ext.getAppVersionCode = {
    getVersionProps()['versionCode'].toInteger()
}

ext.getAppVersionName = {
    getVersionProps()['versionName'].toString()
}

private void saveChanges(String versionName) {
    def versionProps = getVersionProps()
    versionProps['versionName'] = versionName
    versionProps.store(getVersionFile().newWriter(), null)
}

private void saveNightlyChanges(String versionName, String versionNameNightly) {
    def versionProps = getVersionProps()
    versionProps['versionName'] = versionName
    versionProps['versionNightly'] = versionNameNightly
    versionProps.store(getVersionFile().newWriter(), null)
}

private void saveRCChanges(String versionName, String versionNameRC) {
    def versionProps = getVersionProps()
    versionProps['versionName'] = versionName
    versionProps['versionRC'] = versionNameRC
    versionProps.store(getVersionFile().newWriter(), null)
}

task versionNightly {
    doLast {
        def versionNameMajor = getVersionNameMajor()
        def versionNameMinor = getVersionNameMinor()
        def versionNamePatch = getVersionNamePatch()
        def versionNameNightly = getVersionNightly() + 1
        def versionName = "${versionNameMajor}.${versionNameMinor}.${versionNamePatch}-NIGHTLY-${versionNameNightly}".toString()
        saveNightlyChanges(versionName, "${versionNameNightly}".toString())
        commit(versionName, "Nightly")
    }
}

task versionRC {
    doLast {
        def versionNameMajor = getVersionNameMajor()
        def versionNameMinor = getVersionNameMinor()
        def versionNamePatch = getVersionNamePatch()
        def versionNameRC = getVersionRC() + 1
        def versionName = "${versionNameMajor}.${versionNameMinor}.${versionNamePatch}-RC-${versionNameRC}".toString()
        saveRCChanges(versionName, "${versionNameRC}".toString())
        commit(versionName, "RC")
    }
}

task versionPatch {
    doLast {
        def versionNameMajor = getVersionNameMajor()
        def versionNameMinor = getVersionNameMinor()
        def versionNamePatch = getVersionNamePatch() + 1
        def versionName = "${versionNameMajor}.${versionNameMinor}.${versionNamePatch}".toString()
        saveChanges(versionName)
        commit(versionName, "Patch")
    }
}

task versionMinor {
    doLast {
        def versionNameMajor = getVersionNameMajor()
        def versionNameMinor = getVersionNameMinor() + 1
        def versionNamePatch = getVersionNamePatch()
        def versionName = "${versionNameMajor}.${versionNameMinor}.${versionNamePatch}".toString()
        saveChanges(versionName)
        commit(versionName, "Minor")
    }
}

task versionMajor {
    doLast {
        def versionNameMajor = getVersionNameMajor() + 1
        def versionNameMinor = getVersionNameMinor()
        def versionNamePatch = getVersionNamePatch()
        def versionName = "${versionNameMajor}.${versionNameMinor}.${versionNamePatch}".toString()
        saveChanges(versionName)
        commit(versionName, "Major")
    }
}