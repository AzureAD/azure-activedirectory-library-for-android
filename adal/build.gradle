apply plugin: 'com.android.library'
apply plugin: 'findbugs'
apply plugin: 'pmd'
apply plugin: 'checkstyle'
apply plugin: 'maven-publish'

group = 'com.microsoft.aad'

configurations {
    javadocDeps
}

allprojects {
    repositories {
        mavenLocal()
        jcenter()
        google()
    }
}

buildscript {
    repositories {
        jcenter()
    }
    dependencies {
    }
}

android {
    compileSdkVersion rootProject.ext.compileSdkVersion

    defaultConfig {
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion
        versionCode 1
        versionName "1.15.0"
        project.archivesBaseName = "adal"
        project.version = android.defaultConfig.versionName
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }
    buildTypes {
        debug {
            testCoverageEnabled true
            debuggable true

        }
        release {
            minifyEnabled false
            debuggable false
            proguardFiles getDefaultProguardFile('proguard-android.txt')
        }
    }

    flavorDimensions "main"

    productFlavors {
        // The 'local' productFlavor sources common from mavenLocal and is intended to be used
        // during development.
        local {
            dimension "main"
            versionNameSuffix "-local"
        }

        // The 'dist' productFlavor sources common from a central repository and is intended
        // to be used for releases.
        dist {
            dimension "main"
        }
    }

    sourceSets {
        main {
            manifest.srcFile 'src/main/AndroidManifest.xml'
            java.srcDirs = ['src/main/java', 'src/main/aidl']
        }

        androidTest.setRoot('src/androidTest')
    }

    sourceSets {
        main {
            java {
                srcDir 'src/telemetry/java'
            }
        }
    }

    lintOptions {
        abortOnError true
        disable 'MissingPermission'
        disable 'LongLogTag'
        disable 'DefaultLocale'
        disable 'UnusedResources'
        disable 'GradleDependency'
        disable 'GradleOverrides'
        disable 'OldTargetApi'
        disable 'PackageManagerGetSignatures'
    }

    libraryVariants.all { variant ->
        variant.outputs.all {
            outputFileName = "${archivesBaseName}-${version}.aar"
        }
    }
}

dependencies {
    // Dependencies required only at compile time
    compileOnly 'com.google.code.findbugs:annotations:3.0.1', {
        // Need to exclude these, or build is broken by:
        //   com.android.dex.DexException: Multiple dex files define Ljavax/annotation/CheckForNull
        exclude module: 'jsr305'
        exclude module: 'jcip-annotations'
    }

    // Dependencies
    implementation "com.android.support:appcompat-v7:$rootProject.ext.supportLibraryVersion"
    implementation "com.google.code.gson:gson:$rootProject.ext.gsonVersion"
    implementation "com.android.support:support-annotations:$rootProject.ext.supportLibraryVersion"
    implementation "com.android.support:support-v4:$rootProject.ext.supportLibraryVersion"

    // 'local' flavor dependencies
    localApi(project(":common")) {
        transitive = false
    }

    // 'dist' flavor dependencies
    distApi("com.microsoft.identity:common:0.0.3-RC1") {
        transitive = false
    }

    // Android Instrumented Test Dependencies
    androidTestImplementation "com.android.support.test:runner:$rootProject.ext.runnerVersion"
    androidTestImplementation "com.android.support.test:rules:$rootProject.ext.rulesVersion"
    androidTestImplementation "org.mockito:mockito-core:$rootProject.ext.mockitoCoreVersion"
    androidTestImplementation "org.mockito:mockito-android:$rootProject.ext.mockitoAndroidVersion"

    // Test Dependencies
    testImplementation "junit:junit:$rootProject.ext.junitVersion"

    // Javadoc Dependencies
    javadocDeps "com.android.support:support-annotations:$rootProject.ext.supportLibraryVersion"
    javadocDeps "com.android.support:support-v4:$rootProject.ext.supportLibraryVersion"
}

task sourcesJar(type: Jar) {
    from android.sourceSets.main.java.srcDirs
    classifier = 'sources'
    destinationDir = reporting.file("$project.buildDir/outputs/jar/")
}

task javadoc(type: Javadoc) {
    source = android.sourceSets.main.java.srcDirs
    classpath += configurations.compile
    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
    classpath += configurations.javadocDeps
    exclude '**/*.aidl'

    if (JavaVersion.current().isJava8Compatible()) {
        allprojects {
            tasks.withType(Javadoc) {
                options.addStringOption('Xdoclint:none', '-quiet')
            }
        }
    }

    destinationDir = reporting.file("$project.buildDir/outputs/jar/javadoc/")
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
    destinationDir = reporting.file("$project.buildDir/outputs/jar/")
}

// For publishing to the remote maven repo.
publishing {
    publications {
        adal(MavenPublication) {
            groupId 'com.microsoft.aad'
            artifactId 'adal'
            //Edit the 'version' here for VSTS RC build
            version = project.version

            pom.withXml {
                // Custom values

                // Name
                asNode().appendNode('name', 'adal')

                // Description
                asNode().appendNode(
                        'description',
                        'Azure active directory library for Android gives you the ability to add Windows Azure Active Directory authentication to your application with just a few lines of additional code. Using our ADAL SDKs you can quickly and easily extend your existing application to all the employees that use Windows Azure AD and Active Directory on-premises using Active Directory Federation Services, including Office365 customers.'
                )

                // URL
                asNode().appendNode('url', 'https://github.com/AzureAD/azure-activedirectory-library-for-android')

                // Inception Year
                asNode().appendNode('inceptionYear', '2014')

                // Licenses
                asNode().appendNode('licenses').appendNode('license').appendNode('name', 'MIT License')

                // Developers
                def developerNode = asNode().appendNode('developers').appendNode('developer')
                developerNode.appendNode('id', 'microsoft')
                developerNode.appendNode('name', 'Microsoft')

                // SCM
                asNode().appendNode('scm').appendNode('url', 'https://github.com/AzureAD/azure-activedirectory-library-for-android/tree/master')

                // Properties
                def propertiesNode = asNode().appendNode('properties')
                propertiesNode.appendNode('branch', 'master')
                propertiesNode.appendNode('version', project.version)

                def dependenciesNode = asNode().appendNode('dependencies')

                def deps = configurations.implementation.allDependencies.asList()
                deps.addAll(configurations.distApi.allDependencies.asList())

                //Iterate over the implementation dependencies (we don't want the test ones), adding a <dependency> node for each
                deps.each {
                    if (it.group != null && it.name != null) {
                        def dependencyNode = dependenciesNode.appendNode('dependency')
                        dependencyNode.appendNode('groupId', it.group)
                        dependencyNode.appendNode('artifactId', it.name)
                        dependencyNode.appendNode('version', it.version)
                    }
                }

            }

            artifact(sourcesJar)
            artifact(javadocJar)
            artifact("$buildDir/outputs/aar/adal-${project.version}.aar")
        }

    }

    // Repositories to which Gradle can publish artifacts
    repositories {
        maven {
            name "vsts-maven-adal-android"
            url "https://identitydivision.pkgs.visualstudio.com/_packaging/AndroidADAL/maven/v1"
            credentials {
                username project.findProperty("vstsUsername")
                password project.findProperty("vstsMavenAccessToken")
            }
        }
    }
}

// Repositories from which Gradle can fetch dependencies
repositories {
    maven {
        name "vsts-maven-adal-android"
        url "https://identitydivision.pkgs.visualstudio.com/_packaging/AndroidADAL/maven/v1"
        credentials {
            username project.findProperty("vstsUsername")
            password project.findProperty("vstsMavenAccessToken")
        }
    }
}

def getTimestamp() {
    def date = new Date()
    return date.format('yyyyMMdd.HHmm')
}

artifacts {
    archives javadocJar
    archives sourcesJar
}

findbugs {
    ignoreFailures = false
    reportsDir = file("$project.buildDir/outputs/")
    reportLevel = "medium"
    effort = "max"
}

task findbugs(type: FindBugs) {
    description 'Run findbugs'
    group 'verification'

    classes = fileTree("$project.buildDir/intermediates/classes/local/debug/")
    source = fileTree('src/main/java')
    classpath = files()
    effort = 'max'
    excludeFilter = file("../config/findbugs/exclude.xml")

    reports {
        xml.enabled = false
        html.enabled = true
    }
}

pmd {
    ignoreFailures = false
    reportsDir = file("$project.buildDir/outputs/")
}

task pmd(type: Pmd) {
    description 'Run pmd'
    group 'verification'

    ruleSets = ["java-basic", "java-braces", "java-strings", "java-unusedcode"]
    source = fileTree('src/main/java')

    reports {
        xml.enabled = false
        html.enabled = true
    }
}

def configDir = new File(buildscript.sourceFile.parentFile.parentFile, 'config')
ext.checkstyleConfigDir = "$configDir/checkstyle"

checkstyle {
    ignoreFailures = false
    reportsDir = file("$project.buildDir/outputs/")
}

task checkstyle(type: Checkstyle) {
    configFile file("${project.rootDir}/config/checkstyle/checkstyle.xml")

    configProperties.checkstyleConfigDir = checkstyleConfigDir
    configProperties.checkstyleSuppressionsPath = file("${project.rootDir}/config/checkstyle/suppressions.xml").absolutePath
    source 'src'
    include '**/*.java'
    exclude '**/gen/**'
    classpath = files()
}

tasks.whenTaskAdded { task ->
    if (task.name == 'assembleDebug' || task.name == 'assembleRelease') {
        task.dependsOn 'checkstyle', 'pmd', 'lint'
        task.finalizedBy 'findbugs'
    }
}
