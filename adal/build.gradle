apply plugin: 'com.android.library'
// This plugin publishes adal in to the local maven repo
apply plugin: 'com.github.dcendents.android-maven'
//These plugins are used for static code analysis tools
apply plugin: 'findbugs'
apply plugin: 'pmd'
apply plugin: 'checkstyle'

group = 'com.microsoft.aad'
version = '1.1.16'

buildscript {
    repositories {
        jcenter()
    }
    dependencies {
            classpath 'com.github.dcendents:android-maven-gradle-plugin:1.3'
    }
}

android {
    compileSdkVersion 21
    buildToolsVersion "21.1.2"

    defaultConfig {
        minSdkVersion 18
        targetSdkVersion 21
        versionCode 1
        versionName version
        project.archivesBaseName = "adal"
        project.version = android.defaultConfig.versionName
    }

    buildTypes {
        release {
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
    sourceSets {
        main {
            manifest.srcFile 'src/main/AndroidManifest.xml'
        }
    }

    lintOptions {
        abortOnError false
        htmlOutput file("$project.buildDir\\outputs\\analysisReport\\lint-results.html")
        htmlReport true

    }

    libraryVariants.all { variant ->
        variant.outputs.each { output ->
            def outputFile = output.outputFile
            if (outputFile != null && outputFile.name.endsWith('.aar')) {
                def fileName = "${archivesBaseName}-${version}.aar"
                output.outputFile = new File(outputFile.parent, fileName)
            }
        }
    }

}

dependencies {
    androidTestCompile 'org.mockito:mockito-core:1.10.19'
    androidTestCompile 'com.google.dexmaker:dexmaker:1.2'
    androidTestCompile 'com.google.dexmaker:dexmaker-mockito:1.2'
    compile 'com.android.support:appcompat-v7:21.0.3'
    compile 'com.google.code.gson:gson:2.2.4'
    testCompile 'junit:junit:4.12'
}

//tasks to generate the jar files
task sourcesJar(type: Jar) {
    from android.sourceSets.main.java.srcDirs
    classifier = 'sources'
    destinationDir = reporting.file("$project.buildDir/outputs/jar/")
}

task javadoc(type: Javadoc) {
    source = android.sourceSets.main.java.srcDirs
    classpath = configurations.compile
    destinationDir = reporting.file("$project.buildDir/outputs/jar/javadoc/")
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
    destinationDir = reporting.file("$project.buildDir/outputs/jar/")
}

task clearJar(type: Delete) {
    delete 'build/outputs/jar/adal-'+getVersion()+'-classes.jar'
}

task makeJar(type: Copy) {
    from('build/intermediates/bundles/release/')
    into('build/outputs/jar/')
    include('classes.jar')
    rename ('classes.jar', 'adal-'+getVersion()+'-classes.jar')
}

artifacts {
    archives javadocJar
    archives sourcesJar
}

build.dependsOn 'clearJar', 'makeJar'


// tasks for the code quality checking
findbugs {
    ignoreFailures = true
    reportsDir = file("$project.buildDir/outputs/analysisReport/")
    reportLevel = "medium"
    effort = "max"
}

task findbugs(type: FindBugs) {
    description 'Run findbugs'
    group 'verification'
    classes = fileTree("build/intermediates/classes/debug/")
    source = fileTree('src/main/java')
    classpath = files()
    effort = 'max'
    excludeFilter = file("../config/findbugs/exclude.xml")

    reports {
        xml.enabled = false
        html.enabled = true
    }
}

pmd {
    ignoreFailures = true
    reportsDir = file("$project.buildDir/outputs/analysisReport/")
}

task pmd(type: Pmd) {
    description 'Run pmd'
    group 'verification'
    ruleSets = ["java-basic", "java-braces", "java-strings", "java-design", "java-unusedcode"]
    source = fileTree('src/main/java')

    reports {
        xml.enabled = false
        html.enabled = true
    }
}

checkstyle {
    ignoreFailures = true
    reportsDir = file("$project.buildDir/outputs/analysisReport/")
}

task checkstyle(type: Checkstyle) {
    configFile file("${project.rootDir}/config/checkstyle/checkstyle.xml")
    configProperties.checkstyleSuppressionsPath = file("${project.rootDir}/config/checkstyle/suppressions.xml").absolutePath
    source 'src'
    include '**/*.java'
    exclude '**/gen/**'
    classpath = files()
}

// assemble the code quality checking tasks with assembleDebug
assembleDebug.dependsOn 'checkstyle', 'pmd', 'findbugs', 'lint'