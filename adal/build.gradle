apply plugin: 'com.android.library'
// Add JaCoCo for coverage metrics
apply plugin: 'jacoco'
// This plugin publishes adal in to the local maven repo
apply plugin: 'com.github.dcendents.android-maven'
apply plugin: 'findbugs'
apply plugin: 'pmd'
apply plugin: 'checkstyle'
apply plugin: 'maven-publish'

group = 'com.microsoft.aad'

configurations {
    javadocDeps
}

allprojects {
    repositories {
        jcenter()
        maven {
            url "https://maven.google.com"
        }
    }
}

buildscript {
    repositories {
        jcenter()
    }
    dependencies {
        classpath "com.github.dcendents:android-maven-gradle-plugin:$rootProject.ext.androidMavenGradlePluginVersion"
    }
}

android {
    compileSdkVersion rootProject.ext.compileSdkVersion
    buildToolsVersion rootProject.ext.buildToolsVersion

    defaultConfig {
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion
        versionCode 1
        versionName "1.14.0"
        project.archivesBaseName = "adal"
        project.version = android.defaultConfig.versionName
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }
    buildTypes {
        debug {
            testCoverageEnabled true
            debuggable true
        }
        release {
            minifyEnabled false
            debuggable false
            proguardFiles getDefaultProguardFile('proguard-android.txt')
        }
    }

    sourceSets {
        main {
            manifest.srcFile 'src/main/AndroidManifest.xml'
            java.srcDirs = ['src/main/java', 'src/main/aidl']
        }

        androidTest.setRoot('src/androidTest')
    }

    sourceSets {
        main {
            java {
                srcDir 'src/telemetry/java'
            }
        }
    }

    lintOptions {
        abortOnError true
        disable 'MissingPermission'
        disable 'LongLogTag'
        disable 'DefaultLocale'
        disable 'UnusedResources'
        disable 'GradleDependency'
        disable 'GradleOverrides'
        disable 'OldTargetApi'
        disable 'PackageManagerGetSignatures'
    }

    libraryVariants.all { variant ->
        variant.outputs.each { output ->
            def outputFile = output.outputFile
            if (outputFile != null && outputFile.name.endsWith('.aar')) {
                def fileName = "${archivesBaseName}-${version}.aar"
                output.outputFile = new File(outputFile.parent, fileName)
            }
        }
    }
}

dependencies {
    // Compile Dependencies
    compile "com.android.support:appcompat-v7:$rootProject.ext.supportLibraryVersion"
    compile "com.google.code.gson:gson:$rootProject.ext.gsonVersion"
    compile "com.android.support:support-annotations:$rootProject.ext.supportLibraryVersion"
    compile "com.android.support:support-v4:$rootProject.ext.supportLibraryVersion"

    // Android Instrumental Test Dependencies
    androidTestCompile "com.android.support.test:runner:$rootProject.ext.runnerVersion"
    androidTestCompile "com.android.support.test:rules:$rootProject.ext.rulesVersion"
    androidTestCompile "org.mockito:mockito-core:$rootProject.ext.mockitoCoreVersion"
    androidTestCompile "com.google.dexmaker:dexmaker-mockito:$rootProject.ext.dexmakerMockitoVersion"

    // Test Dependencies
    testCompile "junit:junit:$rootProject.ext.junitVersion"

    // Javadoc Dependencies
    javadocDeps "com.android.support:support-annotations:$rootProject.ext.supportLibraryVersion"
    javadocDeps "com.android.support:support-v4:$rootProject.ext.supportLibraryVersion"
}

task jacocoTestReport(type: JacocoReport, dependsOn: 'testDebugUnitTest') {
    reports {
        xml.enabled = true
        html.enabled = true
    }

    jacocoClasspath = configurations['androidJacocoAnt']

    def fileFilter = ['**/R.class', '**/R$*.class', '**/BuildConfig.*', '**/Manifest*.*', '**/*Test*.*', 'android/**/*.*', '**/AuthenticationConstants*.*', '**/IBrokerAccountService*.*', '**/EventStrings.class']
    def debugTree = fileTree(dir: "${buildDir}/intermediates/classes/debug", excludes: fileFilter)
    def mainSrc = "${project.projectDir}/src/main/java"

    sourceDirectories = files([mainSrc])
    classDirectories = files([debugTree])
    executionData = fileTree(dir: "$buildDir", includes: [
            "jacoco/testDebugUnitTest.exec",
            "outputs/code-coverage/connected/*coverage.ec"
    ])
}

task createPom  {
    pom {
        project {
            groupId 'com.microsoft.aad'
            artifactId 'adal'
            version = project.version
            packaging 'aar'
            name 'adal'

            description 'Azure active directory library for Android gives you the ability to add Windows Azure Active Directory authentication to your application with just a few lines of additional code. Using our ADAL SDKs you can quickly and easily extend your existing application to all the employees that use Windows Azure AD and Active Directory on-premises using Active Directory Federation Services, including Office365 customers.'
            url 'https://github.com/MSOpenTech/azure-activedirectory-library-for-android'

            developers {
                developer {
                    id 'microsoft'
                    name 'Microsoft'
                }
            }

            licenses {
                license {
                    name 'MIT License'
                }
            }
            inceptionYear '2014'

            properties {
                branch 'master'
                adalVersion = project.version
            }

            scm {
                url "https://github.com/MSOpenTech/azure-activedirectory-library-for-android/tree/master"
            }
        }
    }.writeTo("${archivesBaseName}-${version}.pom")
}

task sourcesJar(type: Jar) {
    from android.sourceSets.main.java.srcDirs
    classifier = 'sources'
    destinationDir = reporting.file("$project.buildDir/outputs/jar/")
}

task javadoc(type: Javadoc) {
    source = android.sourceSets.main.java.srcDirs
    classpath += configurations.compile
    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
    classpath += configurations.javadocDeps
    exclude '**/*.aidl'
    if (JavaVersion.current().isJava8Compatible()) {
        allprojects {
            tasks.withType(Javadoc) {
                options.addStringOption('Xdoclint:none', '-quiet')
            }
        }
    }
    destinationDir = reporting.file("$project.buildDir/outputs/jar/javadoc/")
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
    destinationDir = reporting.file("$project.buildDir/outputs/jar/")
}

// For publishing to the remote maven repo.
publishing {
    publications {
        adal(MavenPublication) {
            groupId 'com.microsoft.aad'
            artifactId 'adal'
            //Edit the 'version' here for VSTS RC build
            version = project.version

            pom.withXml {
                def dependenciesNode = asNode().appendNode('dependencies')

                //Iterate over the compile dependencies (we don't want the test ones), adding a <dependency> node for each
                configurations.compile.allDependencies.each {
                    if (it.group != null && it.name != null) {
                        def dependencyNode = dependenciesNode.appendNode('dependency')
                        dependencyNode.appendNode('groupId', it.group)
                        dependencyNode.appendNode('artifactId', it.name)
                        dependencyNode.appendNode('version', it.version)
                    }
                }
            }

            artifact(sourcesJar)
            artifact(javadocJar)
            artifact("$buildDir/outputs/aar/adal-${project.version}.aar")
        }
    }

    // Repositories to which Gradle can publish artifacts
    repositories {
        maven {
            name "vsts-maven-adal-android"
            url "https://identitydivision.pkgs.visualstudio.com/_packaging/AndroidADAL/maven/v1"
            credentials {
                username project.findProperty("vstsUsername")
                password project.findProperty("vstsMavenAccessToken")
            }
        }
    }
}

// Repositories from which Gradle can fetch dependencies
repositories {
    maven {
        name "vsts-maven-adal-android"
        url "https://identitydivision.pkgs.visualstudio.com/_packaging/AndroidADAL/maven/v1"
        credentials {
            username project.findProperty("vstsUsername")
            password project.findProperty("vstsMavenAccessToken")
        }
    }
}

def getTimestamp() {
    def date = new Date()
    return date.format('yyyyMMdd.HHmm')
}

artifacts {
    archives javadocJar
    archives sourcesJar
}

findbugs {
    ignoreFailures = false
    reportsDir = file("$project.buildDir/outputs/")
    reportLevel = "medium"
    effort = "max"
}

task findbugs(type: FindBugs) {
    description 'Run findbugs'
    group 'verification'

    classes = fileTree("build/intermediates/classes/debug/")
    source = fileTree('src/main/java')
    classpath = files()
    effort = 'max'
    excludeFilter = file("../config/findbugs/exclude.xml")

    reports {
        xml.enabled = false
        html.enabled = true
    }
}

pmd {
    ignoreFailures = false
    reportsDir = file("$project.buildDir/outputs/")
}

task pmd(type: Pmd) {
    description 'Run pmd'
    group 'verification'

    ruleSets = ["java-basic", "java-braces", "java-strings", "java-unusedcode"]
    source = fileTree('src/main/java')

    reports {
        xml.enabled = false
        html.enabled = true
    }
}

def configDir = new File(buildscript.sourceFile.parentFile.parentFile, 'config')
ext.checkstyleConfigDir = "$configDir/checkstyle"

checkstyle {
    ignoreFailures = false
    reportsDir = file("$project.buildDir/outputs/")
}

task checkstyle(type: Checkstyle) {
    configFile file("${project.rootDir}/config/checkstyle/checkstyle.xml")

    configProperties.checkstyleConfigDir = checkstyleConfigDir
    configProperties.checkstyleSuppressionsPath = file("${project.rootDir}/config/checkstyle/suppressions.xml").absolutePath
    source 'src'
    include '**/*.java'
    exclude '**/gen/**'
    classpath = files()
}

tasks.whenTaskAdded { task ->
    if (task.name == 'assembleDebug' || task.name == 'assembleRelease') {
        task.dependsOn 'checkstyle', 'pmd', 'findbugs', 'lint', 'createPom'
    }
}
