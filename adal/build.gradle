apply plugin: 'com.android.library'
// This plugin publishes adal in to the local maven repo
apply plugin: 'com.github.dcendents.android-maven'
apply plugin: 'findbugs'
apply plugin: 'pmd'
apply plugin: 'checkstyle'
apply plugin: 'maven-publish'

group = 'com.microsoft.aad'

buildscript {
    repositories {
        jcenter()
    }
    dependencies {
            classpath 'com.github.dcendents:android-maven-gradle-plugin:1.4.1'
    }
}

android {
    compileSdkVersion 25
    buildToolsVersion "25.0.0"

    defaultConfig {
        minSdkVersion 14
        targetSdkVersion 25
        versionCode 1
        versionName "1.12.0"
        project.archivesBaseName = "adal"
        project.version = android.defaultConfig.versionName
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt')
        }
    }

    sourceSets {
        main {
            manifest.srcFile 'src/main/AndroidManifest.xml'
            java.srcDirs = ['src/main/java', 'src/main/aidl']
        }
    }

    sourceSets {
        main {
            java {
                srcDir 'src/telemetry/java'
            }
        }
    }

    lintOptions {
        abortOnError true
        disable 'MissingPermission'
        disable 'LongLogTag'
        disable 'DefaultLocale'
        disable 'UnusedResources'
        disable 'GradleDependency'
        disable 'GradleOverrides'
        disable 'OldTargetApi'
    }

    libraryVariants.all { variant ->
        variant.outputs.each { output ->
            def outputFile = output.outputFile
            if (outputFile != null && outputFile.name.endsWith('.aar')) {
                def fileName = "${archivesBaseName}-${version}.aar"
                output.outputFile = new File(outputFile.parent, fileName)
            }
        }
    }
}

dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])
    //Compile Dependencies
    compile 'com.android.support:appcompat-v7:25.0.0'
    compile 'com.google.code.gson:gson:2.2.4'

    //Android Instrumental Test Dependencies
    androidTestCompile 'com.android.support.test:runner:0.5'
    // Set this dependency to use JUnit 4 rules
    androidTestCompile 'com.android.support.test:rules:0.5'
    androidTestCompile 'org.mockito:mockito-core:1.10.19'
    androidTestCompile 'com.google.dexmaker:dexmaker:1.2'
    androidTestCompile 'com.google.dexmaker:dexmaker-mockito:1.2'

    // Test Dependencies
    testCompile 'junit:junit:4.12'
}


task createPom  {
    pom {
        project {
            groupId 'com.microsoft.aad'
            artifactId 'adal'
            version = project.version
            packaging 'aar'
            name 'adal'

            description 'Azure active directory library for Android gives you the ability to add Windows Azure Active Directory authentication to your application with just a few lines of additional code. Using our ADAL SDKs you can quickly and easily extend your existing application to all the employees that use Windows Azure AD and Active Directory on-premises using Active Directory Federation Services, including Office365 customers.'
            url 'https://github.com/MSOpenTech/azure-activedirectory-library-for-android'

            developers {
                developer {
                    id 'microsoft'
                    name 'Microsoft'
                }
            }

            licenses {
                license {
                    name 'Apache License, Version 2.0'
                }
            }
            inceptionYear '2014'

            properties {
                branch 'master'
                adalVersion = project.version
            }

            scm {
                url "https://github.com/MSOpenTech/azure-activedirectory-library-for-android/tree/master"
            }
        }
    }.writeTo("${archivesBaseName}-${version}.pom")
}

task sourcesJar(type: Jar) {
    from android.sourceSets.main.java.srcDirs
    classifier = 'sources'
    destinationDir = reporting.file("$project.buildDir/outputs/jar/")
}

task javadoc(type: Javadoc) {
    source = android.sourceSets.main.java.srcDirs
    exclude '**/*.aidl'
    if (JavaVersion.current().isJava8Compatible()) {
        allprojects {
            tasks.withType(Javadoc) {
                options.addStringOption('Xdoclint:none', '-quiet')
            }
        }
    }
    classpath = configurations.compile
    destinationDir = reporting.file("$project.buildDir/outputs/jar/javadoc/")
    failOnError = false
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
    destinationDir = reporting.file("$project.buildDir/outputs/jar/")
}

artifacts {
    archives javadocJar
    archives sourcesJar
}

findbugs {
    ignoreFailures = false
    reportsDir = file("$project.buildDir/outputs/")
    reportLevel = "medium"
    effort = "max"
}

task findbugs(type: FindBugs) {
    description 'Run findbugs'
    group 'verification'

    classes = fileTree("build/intermediates/classes/debug/")
    source = fileTree('src/main/java')
    classpath = files()
    effort = 'max'
    excludeFilter = file("../config/findbugs/exclude.xml")

    reports {
        xml.enabled = false
        html.enabled = true
    }
}

pmd {
    ignoreFailures = false
    reportsDir = file("$project.buildDir/outputs/")
}

task pmd(type: Pmd) {
    description 'Run pmd'
    group 'verification'

    ruleSets = ["java-basic", "java-braces", "java-strings", "java-unusedcode"]
    source = fileTree('src/main/java')

    reports {
        xml.enabled = false
        html.enabled = true
    }
}

def configDir = new File(buildscript.sourceFile.parentFile.parentFile, 'config')
ext.checkstyleConfigDir = "$configDir/checkstyle"

checkstyle {
    ignoreFailures = false
    reportsDir = file("$project.buildDir/outputs/")
}

task checkstyle(type: Checkstyle) {
    configFile file("${project.rootDir}/config/checkstyle/checkstyle.xml")

    configProperties.checkstyleConfigDir = checkstyleConfigDir
    configProperties.checkstyleSuppressionsPath = file("${project.rootDir}/config/checkstyle/suppressions.xml").absolutePath
    source 'src'
    include '**/*.java'
    exclude '**/gen/**'
    classpath = files()
}

tasks.whenTaskAdded { task ->
    if (task.name == 'assembleDebug' || task.name == 'assembleRelease') {
        task.dependsOn 'checkstyle', 'pmd', 'findbugs', 'lint', 'createPom'
    }
}
