apply plugin: 'com.android.library'
// This plugin publishes adal in to the local maven repo
apply plugin: 'com.github.dcendents.android-maven'
apply plugin: 'findbugs'
apply plugin: 'pmd'
apply plugin: 'checkstyle'
apply plugin: 'maven-publish'

group = 'com.microsoft.aad'

buildscript {
    repositories {
        jcenter()
    }
    dependencies {
            classpath 'com.github.dcendents:android-maven-gradle-plugin:1.3'
    }
}

android {
    compileSdkVersion 23
    buildToolsVersion "23.0.3"

    defaultConfig {
        minSdkVersion 14
        targetSdkVersion 23
        versionCode 1
        versionName "1.10.0"
        project.archivesBaseName = "adal"
        project.version = android.defaultConfig.versionName
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt')
        }
    }

    sourceSets {
        main {
            manifest.srcFile 'src/main/AndroidManifest.xml'
        }
    }

    lintOptions {
        abortOnError true
        disable 'MissingPermission'
        disable 'LongLogTag'
        disable 'DefaultLocale'
        disable 'UnusedResources'
        disable 'GradleDependency'
        disable 'GradleOverrides'
        disable 'OldTargetApi'
    }

    libraryVariants.all { variant ->
        variant.outputs.each { output ->
            def outputFile = output.outputFile
            if (outputFile != null && outputFile.name.endsWith('.aar')) {
                def fileName = "${archivesBaseName}-${version}.aar"
                output.outputFile = new File(outputFile.parent, fileName)
            }
        }
    }
}

dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])
    //Compile Dependencies
    compile 'com.android.support:appcompat-v7:23.4.0'
    compile 'com.google.code.gson:gson:2.2.4'

    //Android Instrumental Test Dependencies
    androidTestCompile 'org.mockito:mockito-core:1.10.19'
    androidTestCompile 'com.google.dexmaker:dexmaker:1.2'
    androidTestCompile 'com.google.dexmaker:dexmaker-mockito:1.2'

    // Test Dependencies
    testCompile 'junit:junit:4.12'
}


task createPom  {
    pom {
        project {
            groupId 'com.microsoft.aad'
            artifactId 'adal-aggregator'
            version '1.0.0-SNAPSHOT'
            packaging 'jar'
            name 'ADAL ANDROID-API'
            inceptionYear '2013'

            modules {
                module 'adal'
                module 'sample'
                module 'testapp'
                module 'userappwithbroker'
            }

            url 'https://github.com/MSOpenTech/azure-activedirectory-library-for-android'

            properties {
                branch 'master'
                adalVersion = project.version
            }

            scm {
                url "https://github.com/MSOpenTech/azure-activedirectory-library-for-android/tree/master"
                connection 'scm:git:git://github.com/MSOpenTech/azure-activedirectory-library-for-android.git'
                developerConnection 'scm:git:https://github.com/MSOpenTech/azure-activedirectory-library-for-android.git'
            }
        }
    }.writeTo("pom.xml")
}

task sourcesJar(type: Jar) {
    from android.sourceSets.main.java.srcDirs
    classifier = 'sources'
    destinationDir = reporting.file("$project.buildDir/outputs/jar/")
}

task javadoc(type: Javadoc) {
    source = android.sourceSets.main.java.srcDirs
    classpath = configurations.compile
    destinationDir = reporting.file("$project.buildDir/outputs/jar/javadoc/")
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
    destinationDir = reporting.file("$project.buildDir/outputs/jar/")
}

artifacts {
    archives javadocJar
    archives sourcesJar
}

findbugs {
    ignoreFailures = false
    reportsDir = file("$project.buildDir/outputs/")
    reportLevel = "medium"
    effort = "max"
}

task findbugs(type: FindBugs) {
    description 'Run findbugs'
    group 'verification'

    classes = fileTree("build/intermediates/classes/debug/")
    source = fileTree('src/main/java')
    classpath = files()
    effort = 'max'
    excludeFilter = file("../config/findbugs/exclude.xml")

    reports {
        xml.enabled = false
        html.enabled = true
    }
}

pmd {
    ignoreFailures = false
    reportsDir = file("$project.buildDir/outputs/")
}

task pmd(type: Pmd) {
    description 'Run pmd'
    group 'verification'

    ruleSets = ["java-basic", "java-braces", "java-strings", "java-unusedcode"]
    source = fileTree('src/main/java')

    reports {
        xml.enabled = false
        html.enabled = true
    }
}

def configDir = new File(buildscript.sourceFile.parentFile.parentFile, 'config')
ext.checkstyleConfigDir = "$configDir/checkstyle"

checkstyle {
    ignoreFailures = false
    reportsDir = file("$project.buildDir/outputs/")
}

task checkstyle(type: Checkstyle) {
    configFile file("${project.rootDir}/config/checkstyle/checkstyle.xml")

    configProperties.checkstyleConfigDir = checkstyleConfigDir
    configProperties.checkstyleSuppressionsPath = file("${project.rootDir}/config/checkstyle/suppressions.xml").absolutePath
    source 'src'
    include '**/*.java'
    exclude '**/gen/**'
    classpath = files()
}

assembleDebug.dependsOn 'checkstyle', 'pmd', 'findbugs', 'lint', 'createPom'